
MChavezLab6FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034ec  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e0  08003698  08003698  00004698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004878  08004878  0000601c  2**0
                  CONTENTS
  4 .ARM          00000008  08004878  08004878  00005878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004880  08004880  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004880  08004880  00005880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004884  08004884  00005884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004888  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000601c  2**0
                  CONTENTS
 10 .bss          00025958  2000001c  2000001c  0000601c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025974  20025974  0000601c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000095e6  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e8f  00000000  00000000  0000f632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e8  00000000  00000000  000114c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000074f  00000000  00000000  00011eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002516c  00000000  00000000  000125ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c40f  00000000  00000000  0003776b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d91a8  00000000  00000000  00043b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011cd22  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026a4  00000000  00000000  0011cd68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a2  00000000  00000000  0011f40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003680 	.word	0x08003680

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08003680 	.word	0x08003680

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f001 f867 	bl	80015b2 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 f918 	bl	8000718 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f8d5 	bl	8000698 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80004ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 f9e0 	bl	80008b8 <LCD_Clear>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <LCD_Visual_Demo>:

void LCD_Visual_Demo(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	visualDemo();
 8000500:	f000 faac 	bl	8000a5c <visualDemo>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
 8000512:	4b5a      	ldr	r3, [pc, #360]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000516:	4a59      	ldr	r2, [pc, #356]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000518:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800051c:	6453      	str	r3, [r2, #68]	@ 0x44
 800051e:	4b57      	ldr	r3, [pc, #348]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000522:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000526:	61bb      	str	r3, [r7, #24]
 8000528:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	4b53      	ldr	r3, [pc, #332]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	4a52      	ldr	r2, [pc, #328]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6313      	str	r3, [r2, #48]	@ 0x30
 800053a:	4b50      	ldr	r3, [pc, #320]	@ (800067c <LCD_GPIO_Init+0x174>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	4b4c      	ldr	r3, [pc, #304]	@ (800067c <LCD_GPIO_Init+0x174>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	4a4b      	ldr	r2, [pc, #300]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000550:	f043 0302 	orr.w	r3, r3, #2
 8000554:	6313      	str	r3, [r2, #48]	@ 0x30
 8000556:	4b49      	ldr	r3, [pc, #292]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	f003 0302 	and.w	r3, r3, #2
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	4b45      	ldr	r3, [pc, #276]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	4a44      	ldr	r2, [pc, #272]	@ (800067c <LCD_GPIO_Init+0x174>)
 800056c:	f043 0304 	orr.w	r3, r3, #4
 8000570:	6313      	str	r3, [r2, #48]	@ 0x30
 8000572:	4b42      	ldr	r3, [pc, #264]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	f003 0304 	and.w	r3, r3, #4
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	4b3e      	ldr	r3, [pc, #248]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	4a3d      	ldr	r2, [pc, #244]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000588:	f043 0308 	orr.w	r3, r3, #8
 800058c:	6313      	str	r3, [r2, #48]	@ 0x30
 800058e:	4b3b      	ldr	r3, [pc, #236]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	f003 0308 	and.w	r3, r3, #8
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4b37      	ldr	r3, [pc, #220]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a36      	ldr	r2, [pc, #216]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005a4:	f043 0320 	orr.w	r3, r3, #32
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b34      	ldr	r3, [pc, #208]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f003 0320 	and.w	r3, r3, #32
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	4b30      	ldr	r3, [pc, #192]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	4a2f      	ldr	r2, [pc, #188]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c6:	4b2d      	ldr	r3, [pc, #180]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80005d2:	f641 0358 	movw	r3, #6232	@ 0x1858
 80005d6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80005d8:	2302      	movs	r3, #2
 80005da:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80005e0:	2302      	movs	r3, #2
 80005e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80005e4:	230e      	movs	r3, #14
 80005e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	4619      	mov	r1, r3
 80005ee:	4824      	ldr	r0, [pc, #144]	@ (8000680 <LCD_GPIO_Init+0x178>)
 80005f0:	f001 f99e 	bl	8001930 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80005f4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80005f8:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	4619      	mov	r1, r3
 8000600:	4820      	ldr	r0, [pc, #128]	@ (8000684 <LCD_GPIO_Init+0x17c>)
 8000602:	f001 f995 	bl	8001930 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000606:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800060a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	4619      	mov	r1, r3
 8000612:	481d      	ldr	r0, [pc, #116]	@ (8000688 <LCD_GPIO_Init+0x180>)
 8000614:	f001 f98c 	bl	8001930 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000618:	2348      	movs	r3, #72	@ 0x48
 800061a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4619      	mov	r1, r3
 8000622:	481a      	ldr	r0, [pc, #104]	@ (800068c <LCD_GPIO_Init+0x184>)
 8000624:	f001 f984 	bl	8001930 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000628:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800062c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	4619      	mov	r1, r3
 8000634:	4816      	ldr	r0, [pc, #88]	@ (8000690 <LCD_GPIO_Init+0x188>)
 8000636:	f001 f97b 	bl	8001930 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800063a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800063e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	4619      	mov	r1, r3
 8000646:	4813      	ldr	r0, [pc, #76]	@ (8000694 <LCD_GPIO_Init+0x18c>)
 8000648:	f001 f972 	bl	8001930 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800064c:	2303      	movs	r3, #3
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000650:	2309      	movs	r3, #9
 8000652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	480a      	ldr	r0, [pc, #40]	@ (8000684 <LCD_GPIO_Init+0x17c>)
 800065c:	f001 f968 	bl	8001930 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000660:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	4619      	mov	r1, r3
 800066c:	4809      	ldr	r0, [pc, #36]	@ (8000694 <LCD_GPIO_Init+0x18c>)
 800066e:	f001 f95f 	bl	8001930 <HAL_GPIO_Init>
}
 8000672:	bf00      	nop
 8000674:	3730      	adds	r7, #48	@ 0x30
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40020000 	.word	0x40020000
 8000684:	40020400 	.word	0x40020400
 8000688:	40020800 	.word	0x40020800
 800068c:	40020c00 	.word	0x40020c00
 8000690:	40021400 	.word	0x40021400
 8000694:	40021800 	.word	0x40021800

08000698 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b090      	sub	sp, #64	@ 0x40
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80006a6:	23f0      	movs	r3, #240	@ 0xf0
 80006a8:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80006ae:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006b2:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80006b8:	23ff      	movs	r3, #255	@ 0xff
 80006ba:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80006c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80006c6:	2305      	movs	r3, #5
 80006c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d101      	bne.n	80006d4 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <LTCD_Layer_Init+0x78>)
 80006d2:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80006d4:	23f0      	movs	r3, #240	@ 0xf0
 80006d6:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80006d8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006dc:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80006f0:	79fa      	ldrb	r2, [r7, #7]
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	4619      	mov	r1, r3
 80006f8:	4806      	ldr	r0, [pc, #24]	@ (8000714 <LTCD_Layer_Init+0x7c>)
 80006fa:	f001 fcbb 	bl	8002074 <HAL_LTDC_ConfigLayer>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000704:	f000 fa48 	bl	8000b98 <LCD_Error_Handler>
	}
}
 8000708:	bf00      	nop
 800070a:	3740      	adds	r7, #64	@ 0x40
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000114 	.word	0x20000114
 8000714:	20000038 	.word	0x20000038

08000718 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 800071c:	4b2a      	ldr	r3, [pc, #168]	@ (80007c8 <LTCD__Init+0xb0>)
 800071e:	4a2b      	ldr	r2, [pc, #172]	@ (80007cc <LTCD__Init+0xb4>)
 8000720:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000722:	4b29      	ldr	r3, [pc, #164]	@ (80007c8 <LTCD__Init+0xb0>)
 8000724:	2209      	movs	r2, #9
 8000726:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000728:	4b27      	ldr	r3, [pc, #156]	@ (80007c8 <LTCD__Init+0xb0>)
 800072a:	2201      	movs	r2, #1
 800072c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800072e:	4b26      	ldr	r3, [pc, #152]	@ (80007c8 <LTCD__Init+0xb0>)
 8000730:	221d      	movs	r2, #29
 8000732:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000734:	4b24      	ldr	r3, [pc, #144]	@ (80007c8 <LTCD__Init+0xb0>)
 8000736:	2203      	movs	r2, #3
 8000738:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800073a:	4b23      	ldr	r3, [pc, #140]	@ (80007c8 <LTCD__Init+0xb0>)
 800073c:	f240 120d 	movw	r2, #269	@ 0x10d
 8000740:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000742:	4b21      	ldr	r3, [pc, #132]	@ (80007c8 <LTCD__Init+0xb0>)
 8000744:	f240 1243 	movw	r2, #323	@ 0x143
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800074a:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <LTCD__Init+0xb0>)
 800074c:	f240 1217 	movw	r2, #279	@ 0x117
 8000750:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000752:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <LTCD__Init+0xb0>)
 8000754:	f240 1247 	movw	r2, #327	@ 0x147
 8000758:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <LTCD__Init+0xb0>)
 800075c:	2200      	movs	r2, #0
 800075e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <LTCD__Init+0xb0>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800076a:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <LTCD__Init+0xb0>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000772:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <LTCD__Init+0xb8>)
 8000774:	2208      	movs	r2, #8
 8000776:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000778:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <LTCD__Init+0xb8>)
 800077a:	22c0      	movs	r2, #192	@ 0xc0
 800077c:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800077e:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <LTCD__Init+0xb8>)
 8000780:	2204      	movs	r2, #4
 8000782:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <LTCD__Init+0xb8>)
 8000786:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800078a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800078c:	4810      	ldr	r0, [pc, #64]	@ (80007d0 <LTCD__Init+0xb8>)
 800078e:	f002 faab 	bl	8002ce8 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000792:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <LTCD__Init+0xb0>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000798:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <LTCD__Init+0xb0>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800079e:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <LTCD__Init+0xb0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007a4:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <LTCD__Init+0xb0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80007aa:	f7ff fead 	bl	8000508 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007ae:	4806      	ldr	r0, [pc, #24]	@ (80007c8 <LTCD__Init+0xb0>)
 80007b0:	f001 fb90 	bl	8001ed4 <HAL_LTDC_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80007ba:	f000 f9ed 	bl	8000b98 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80007be:	f000 f9f1 	bl	8000ba4 <ili9341_Init>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000038 	.word	0x20000038
 80007cc:	40016800 	.word	0x40016800
 80007d0:	200000e0 	.word	0x200000e0

080007d4 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	80fb      	strh	r3, [r7, #6]
 80007de:	460b      	mov	r3, r1
 80007e0:	80bb      	strh	r3, [r7, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80007e6:	88ba      	ldrh	r2, [r7, #4]
 80007e8:	4613      	mov	r3, r2
 80007ea:	011b      	lsls	r3, r3, #4
 80007ec:	1a9b      	subs	r3, r3, r2
 80007ee:	011b      	lsls	r3, r3, #4
 80007f0:	461a      	mov	r2, r3
 80007f2:	88fb      	ldrh	r3, [r7, #6]
 80007f4:	4413      	add	r3, r2
 80007f6:	4905      	ldr	r1, [pc, #20]	@ (800080c <LCD_Draw_Pixel+0x38>)
 80007f8:	887a      	ldrh	r2, [r7, #2]
 80007fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000114 	.word	0x20000114

08000810 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	4604      	mov	r4, r0
 8000818:	4608      	mov	r0, r1
 800081a:	4611      	mov	r1, r2
 800081c:	461a      	mov	r2, r3
 800081e:	4623      	mov	r3, r4
 8000820:	80fb      	strh	r3, [r7, #6]
 8000822:	4603      	mov	r3, r0
 8000824:	80bb      	strh	r3, [r7, #4]
 8000826:	460b      	mov	r3, r1
 8000828:	807b      	strh	r3, [r7, #2]
 800082a:	4613      	mov	r3, r2
 800082c:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 800082e:	887b      	ldrh	r3, [r7, #2]
 8000830:	425b      	negs	r3, r3
 8000832:	b29b      	uxth	r3, r3
 8000834:	81fb      	strh	r3, [r7, #14]
 8000836:	e034      	b.n	80008a2 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000838:	887b      	ldrh	r3, [r7, #2]
 800083a:	425b      	negs	r3, r3
 800083c:	b29b      	uxth	r3, r3
 800083e:	81bb      	strh	r3, [r7, #12]
 8000840:	e024      	b.n	800088c <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000842:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000846:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800084a:	fb03 f202 	mul.w	r2, r3, r2
 800084e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000852:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000856:	fb01 f303 	mul.w	r3, r1, r3
 800085a:	441a      	add	r2, r3
 800085c:	887b      	ldrh	r3, [r7, #2]
 800085e:	8879      	ldrh	r1, [r7, #2]
 8000860:	fb01 f303 	mul.w	r3, r1, r3
 8000864:	429a      	cmp	r2, r3
 8000866:	dc0b      	bgt.n	8000880 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000868:	89ba      	ldrh	r2, [r7, #12]
 800086a:	88fb      	ldrh	r3, [r7, #6]
 800086c:	4413      	add	r3, r2
 800086e:	b298      	uxth	r0, r3
 8000870:	89fa      	ldrh	r2, [r7, #14]
 8000872:	88bb      	ldrh	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	b29b      	uxth	r3, r3
 8000878:	883a      	ldrh	r2, [r7, #0]
 800087a:	4619      	mov	r1, r3
 800087c:	f7ff ffaa 	bl	80007d4 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000880:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000884:	b29b      	uxth	r3, r3
 8000886:	3301      	adds	r3, #1
 8000888:	b29b      	uxth	r3, r3
 800088a:	81bb      	strh	r3, [r7, #12]
 800088c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000890:	887b      	ldrh	r3, [r7, #2]
 8000892:	429a      	cmp	r2, r3
 8000894:	ddd5      	ble.n	8000842 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000896:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800089a:	b29b      	uxth	r3, r3
 800089c:	3301      	adds	r3, #1
 800089e:	b29b      	uxth	r3, r3
 80008a0:	81fb      	strh	r3, [r7, #14]
 80008a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80008a6:	887b      	ldrh	r3, [r7, #2]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	ddc5      	ble.n	8000838 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd90      	pop	{r4, r7, pc}
	...

080008b8 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	460a      	mov	r2, r1
 80008c2:	71fb      	strb	r3, [r7, #7]
 80008c4:	4613      	mov	r3, r2
 80008c6:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d10e      	bne.n	80008ec <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	e007      	b.n	80008e4 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80008d4:	4908      	ldr	r1, [pc, #32]	@ (80008f8 <LCD_Clear+0x40>)
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	88ba      	ldrh	r2, [r7, #4]
 80008da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	3301      	adds	r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80008ea:	d3f3      	bcc.n	80008d4 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80008ec:	bf00      	nop
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	20000114 	.word	0x20000114

080008fc <LCD_SetTextColor>:
	}


//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000906:	4a04      	ldr	r2, [pc, #16]	@ (8000918 <LCD_SetTextColor+0x1c>)
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	8013      	strh	r3, [r2, #0]
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	20000000 	.word	0x20000000

0800091c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000924:	4a04      	ldr	r2, [pc, #16]	@ (8000938 <LCD_SetFont+0x1c>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6013      	str	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20000110 	.word	0x20000110

0800093c <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	603a      	str	r2, [r7, #0]
 8000946:	80fb      	strh	r3, [r7, #6]
 8000948:	460b      	mov	r3, r1
 800094a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	e04c      	b.n	80009f4 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	e03f      	b.n	80009e0 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	4413      	add	r3, r2
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	4619      	mov	r1, r3
 800096c:	4b27      	ldr	r3, [pc, #156]	@ (8000a0c <LCD_Draw_Char+0xd0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	889b      	ldrh	r3, [r3, #4]
 8000972:	4a27      	ldr	r2, [pc, #156]	@ (8000a10 <LCD_Draw_Char+0xd4>)
 8000974:	fba2 2303 	umull	r2, r3, r2, r3
 8000978:	08db      	lsrs	r3, r3, #3
 800097a:	b29b      	uxth	r3, r3
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	2280      	movs	r2, #128	@ 0x80
 8000980:	409a      	lsls	r2, r3
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	fa42 f303 	asr.w	r3, r2, r3
 8000988:	400b      	ands	r3, r1
 800098a:	2b00      	cmp	r3, #0
 800098c:	d104      	bne.n	8000998 <LCD_Draw_Char+0x5c>
 800098e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <LCD_Draw_Char+0xd0>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	889b      	ldrh	r3, [r3, #4]
 8000994:	2b0c      	cmp	r3, #12
 8000996:	d920      	bls.n	80009da <LCD_Draw_Char+0x9e>
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	683a      	ldr	r2, [r7, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	461a      	mov	r2, r3
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	fa42 f303 	asr.w	r3, r2, r3
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d104      	bne.n	80009bc <LCD_Draw_Char+0x80>
 80009b2:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <LCD_Draw_Char+0xd0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	889b      	ldrh	r3, [r3, #4]
 80009b8:	2b0c      	cmp	r3, #12
 80009ba:	d80e      	bhi.n	80009da <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	b29a      	uxth	r2, r3
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	4413      	add	r3, r2
 80009c4:	b298      	uxth	r0, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	88bb      	ldrh	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	4a10      	ldr	r2, [pc, #64]	@ (8000a14 <LCD_Draw_Char+0xd8>)
 80009d2:	8812      	ldrh	r2, [r2, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	f7ff fefd 	bl	80007d4 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	3301      	adds	r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <LCD_Draw_Char+0xd0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	889b      	ldrh	r3, [r3, #4]
 80009e6:	461a      	mov	r2, r3
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d3b8      	bcc.n	8000960 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	3301      	adds	r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <LCD_Draw_Char+0xd0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	88db      	ldrh	r3, [r3, #6]
 80009fa:	461a      	mov	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d3ab      	bcc.n	800095a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000a02:	bf00      	nop
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000110 	.word	0x20000110
 8000a10:	aaaaaaab 	.word	0xaaaaaaab
 8000a14:	20000000 	.word	0x20000000

08000a18 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	80fb      	strh	r3, [r7, #6]
 8000a22:	460b      	mov	r3, r1
 8000a24:	80bb      	strh	r3, [r7, #4]
 8000a26:	4613      	mov	r3, r2
 8000a28:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000a2a:	78fb      	ldrb	r3, [r7, #3]
 8000a2c:	3b20      	subs	r3, #32
 8000a2e:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <LCD_DisplayChar+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	78fb      	ldrb	r3, [r7, #3]
 8000a38:	4907      	ldr	r1, [pc, #28]	@ (8000a58 <LCD_DisplayChar+0x40>)
 8000a3a:	6809      	ldr	r1, [r1, #0]
 8000a3c:	88c9      	ldrh	r1, [r1, #6]
 8000a3e:	fb01 f303 	mul.w	r3, r1, r3
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	441a      	add	r2, r3
 8000a46:	88b9      	ldrh	r1, [r7, #4]
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ff76 	bl	800093c <LCD_Draw_Char>
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000110 	.word	0x20000110

08000a5c <visualDemo>:

void visualDemo(void){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
//	LCD_Draw_Vertical_Line(10,10,250,LCD_COLOR_MAGENTA);
//	HAL_Delay(1500);
//	LCD_Draw_Vertical_Line(230,10,250,LCD_COLOR_MAGENTA);
//	HAL_Delay(1500);

	LCD_Draw_Circle_Fill(125,150,20,LCD_COLOR_BLACK);
 8000a60:	2300      	movs	r3, #0
 8000a62:	2214      	movs	r2, #20
 8000a64:	2196      	movs	r1, #150	@ 0x96
 8000a66:	207d      	movs	r0, #125	@ 0x7d
 8000a68:	f7ff fed2 	bl	8000810 <LCD_Draw_Circle_Fill>
	HAL_Delay(100);
 8000a6c:	2064      	movs	r0, #100	@ 0x64
 8000a6e:	f000 fe55 	bl	800171c <HAL_Delay>

	LCD_Clear(0,LCD_COLOR_WHITE);
 8000a72:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000a76:	2000      	movs	r0, #0
 8000a78:	f7ff ff1e 	bl	80008b8 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff ff3d 	bl	80008fc <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000a82:	4844      	ldr	r0, [pc, #272]	@ (8000b94 <visualDemo+0x138>)
 8000a84:	f7ff ff4a 	bl	800091c <LCD_SetFont>
	//LCD_SetFont(LCD_Currentfonts);

//	LCD_DisplayChar(Xpos, Ypos, Ascii)
	//total width is 240, total height is 320
	//                   x, y
		LCD_DisplayChar(72,20,'T');
 8000a88:	2254      	movs	r2, #84	@ 0x54
 8000a8a:	2114      	movs	r1, #20
 8000a8c:	2048      	movs	r0, #72	@ 0x48
 8000a8e:	f7ff ffc3 	bl	8000a18 <LCD_DisplayChar>
		LCD_DisplayChar(90,20,'E');
 8000a92:	2245      	movs	r2, #69	@ 0x45
 8000a94:	2114      	movs	r1, #20
 8000a96:	205a      	movs	r0, #90	@ 0x5a
 8000a98:	f7ff ffbe 	bl	8000a18 <LCD_DisplayChar>
		LCD_DisplayChar(105,20,'T');
 8000a9c:	2254      	movs	r2, #84	@ 0x54
 8000a9e:	2114      	movs	r1, #20
 8000aa0:	2069      	movs	r0, #105	@ 0x69
 8000aa2:	f7ff ffb9 	bl	8000a18 <LCD_DisplayChar>
		LCD_DisplayChar(122,20,'R');
 8000aa6:	2252      	movs	r2, #82	@ 0x52
 8000aa8:	2114      	movs	r1, #20
 8000aaa:	207a      	movs	r0, #122	@ 0x7a
 8000aac:	f7ff ffb4 	bl	8000a18 <LCD_DisplayChar>
		LCD_DisplayChar(133,20,'I');
 8000ab0:	2249      	movs	r2, #73	@ 0x49
 8000ab2:	2114      	movs	r1, #20
 8000ab4:	2085      	movs	r0, #133	@ 0x85
 8000ab6:	f7ff ffaf 	bl	8000a18 <LCD_DisplayChar>
		LCD_DisplayChar(143,20,'S');
 8000aba:	2253      	movs	r2, #83	@ 0x53
 8000abc:	2114      	movs	r1, #20
 8000abe:	208f      	movs	r0, #143	@ 0x8f
 8000ac0:	f7ff ffaa 	bl	8000a18 <LCD_DisplayChar>

		LCD_DisplayChar(10,260,'T');
 8000ac4:	2254      	movs	r2, #84	@ 0x54
 8000ac6:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000aca:	200a      	movs	r0, #10
 8000acc:	f7ff ffa4 	bl	8000a18 <LCD_DisplayChar>
		LCD_DisplayChar(25,260,'o');
 8000ad0:	226f      	movs	r2, #111	@ 0x6f
 8000ad2:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000ad6:	2019      	movs	r0, #25
 8000ad8:	f7ff ff9e 	bl	8000a18 <LCD_DisplayChar>
		LCD_DisplayChar(40,260,'u');
 8000adc:	2275      	movs	r2, #117	@ 0x75
 8000ade:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000ae2:	2028      	movs	r0, #40	@ 0x28
 8000ae4:	f7ff ff98 	bl	8000a18 <LCD_DisplayChar>
		LCD_DisplayChar(55,260,'c');
 8000ae8:	2263      	movs	r2, #99	@ 0x63
 8000aea:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000aee:	2037      	movs	r0, #55	@ 0x37
 8000af0:	f7ff ff92 	bl	8000a18 <LCD_DisplayChar>
		LCD_DisplayChar(70,260,'h');
 8000af4:	2268      	movs	r2, #104	@ 0x68
 8000af6:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000afa:	2046      	movs	r0, #70	@ 0x46
 8000afc:	f7ff ff8c 	bl	8000a18 <LCD_DisplayChar>

		LCD_DisplayChar(100,260,'S');
 8000b00:	2253      	movs	r2, #83	@ 0x53
 8000b02:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000b06:	2064      	movs	r0, #100	@ 0x64
 8000b08:	f7ff ff86 	bl	8000a18 <LCD_DisplayChar>
		LCD_DisplayChar(115,260,'c');
 8000b0c:	2263      	movs	r2, #99	@ 0x63
 8000b0e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000b12:	2073      	movs	r0, #115	@ 0x73
 8000b14:	f7ff ff80 	bl	8000a18 <LCD_DisplayChar>
		LCD_DisplayChar(130,260,'r');
 8000b18:	2272      	movs	r2, #114	@ 0x72
 8000b1a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000b1e:	2082      	movs	r0, #130	@ 0x82
 8000b20:	f7ff ff7a 	bl	8000a18 <LCD_DisplayChar>
		LCD_DisplayChar(145,260,'e');
 8000b24:	2265      	movs	r2, #101	@ 0x65
 8000b26:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000b2a:	2091      	movs	r0, #145	@ 0x91
 8000b2c:	f7ff ff74 	bl	8000a18 <LCD_DisplayChar>
	    LCD_DisplayChar(160,260,'e');
 8000b30:	2265      	movs	r2, #101	@ 0x65
 8000b32:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000b36:	20a0      	movs	r0, #160	@ 0xa0
 8000b38:	f7ff ff6e 	bl	8000a18 <LCD_DisplayChar>
	    LCD_DisplayChar(175,260,'n');
 8000b3c:	226e      	movs	r2, #110	@ 0x6e
 8000b3e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000b42:	20af      	movs	r0, #175	@ 0xaf
 8000b44:	f7ff ff68 	bl	8000a18 <LCD_DisplayChar>

	    LCD_DisplayChar(200,260,'t');
 8000b48:	2274      	movs	r2, #116	@ 0x74
 8000b4a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000b4e:	20c8      	movs	r0, #200	@ 0xc8
 8000b50:	f7ff ff62 	bl	8000a18 <LCD_DisplayChar>
	    LCD_DisplayChar(210,260,'o');
 8000b54:	226f      	movs	r2, #111	@ 0x6f
 8000b56:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000b5a:	20d2      	movs	r0, #210	@ 0xd2
 8000b5c:	f7ff ff5c 	bl	8000a18 <LCD_DisplayChar>

	    LCD_DisplayChar(105,290,'P');
 8000b60:	2250      	movs	r2, #80	@ 0x50
 8000b62:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8000b66:	2069      	movs	r0, #105	@ 0x69
 8000b68:	f7ff ff56 	bl	8000a18 <LCD_DisplayChar>
	    LCD_DisplayChar(120,290,'l');
 8000b6c:	226c      	movs	r2, #108	@ 0x6c
 8000b6e:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8000b72:	2078      	movs	r0, #120	@ 0x78
 8000b74:	f7ff ff50 	bl	8000a18 <LCD_DisplayChar>
	    LCD_DisplayChar(135,290,'a');
 8000b78:	2261      	movs	r2, #97	@ 0x61
 8000b7a:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8000b7e:	2087      	movs	r0, #135	@ 0x87
 8000b80:	f7ff ff4a 	bl	8000a18 <LCD_DisplayChar>
	    LCD_DisplayChar(150,290,'y');
 8000b84:	2279      	movs	r2, #121	@ 0x79
 8000b86:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8000b8a:	2096      	movs	r0, #150	@ 0x96
 8000b8c:	f7ff ff44 	bl	8000a18 <LCD_DisplayChar>
//	LCD_DisplayChar(160,160,'v');
//    LCD_DisplayChar(170,160,'e');
//	LCD_DisplayChar(185,160,'z');
//}
}
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000004 	.word	0x20000004

08000b98 <LCD_Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void){
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop

  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <LCD_Error_Handler+0x8>

08000ba4 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000ba8:	f000 f9fe 	bl	8000fa8 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000bac:	20ca      	movs	r0, #202	@ 0xca
 8000bae:	f000 f943 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000bb2:	20c3      	movs	r0, #195	@ 0xc3
 8000bb4:	f000 f94d 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000bb8:	2008      	movs	r0, #8
 8000bba:	f000 f94a 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000bbe:	2050      	movs	r0, #80	@ 0x50
 8000bc0:	f000 f947 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000bc4:	20cf      	movs	r0, #207	@ 0xcf
 8000bc6:	f000 f937 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f000 f941 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000bd0:	20c1      	movs	r0, #193	@ 0xc1
 8000bd2:	f000 f93e 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000bd6:	2030      	movs	r0, #48	@ 0x30
 8000bd8:	f000 f93b 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000bdc:	20ed      	movs	r0, #237	@ 0xed
 8000bde:	f000 f92b 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000be2:	2064      	movs	r0, #100	@ 0x64
 8000be4:	f000 f935 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f932 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000bee:	2012      	movs	r0, #18
 8000bf0:	f000 f92f 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000bf4:	2081      	movs	r0, #129	@ 0x81
 8000bf6:	f000 f92c 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000bfa:	20e8      	movs	r0, #232	@ 0xe8
 8000bfc:	f000 f91c 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000c00:	2085      	movs	r0, #133	@ 0x85
 8000c02:	f000 f926 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f000 f923 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000c0c:	2078      	movs	r0, #120	@ 0x78
 8000c0e:	f000 f920 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000c12:	20cb      	movs	r0, #203	@ 0xcb
 8000c14:	f000 f910 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000c18:	2039      	movs	r0, #57	@ 0x39
 8000c1a:	f000 f91a 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000c1e:	202c      	movs	r0, #44	@ 0x2c
 8000c20:	f000 f917 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000c24:	2000      	movs	r0, #0
 8000c26:	f000 f914 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000c2a:	2034      	movs	r0, #52	@ 0x34
 8000c2c:	f000 f911 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000c30:	2002      	movs	r0, #2
 8000c32:	f000 f90e 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000c36:	20f7      	movs	r0, #247	@ 0xf7
 8000c38:	f000 f8fe 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000c3c:	2020      	movs	r0, #32
 8000c3e:	f000 f908 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000c42:	20ea      	movs	r0, #234	@ 0xea
 8000c44:	f000 f8f8 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f000 f902 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f000 f8ff 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000c54:	20b1      	movs	r0, #177	@ 0xb1
 8000c56:	f000 f8ef 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f000 f8f9 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000c60:	201b      	movs	r0, #27
 8000c62:	f000 f8f6 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000c66:	20b6      	movs	r0, #182	@ 0xb6
 8000c68:	f000 f8e6 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000c6c:	200a      	movs	r0, #10
 8000c6e:	f000 f8f0 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000c72:	20a2      	movs	r0, #162	@ 0xa2
 8000c74:	f000 f8ed 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000c78:	20c0      	movs	r0, #192	@ 0xc0
 8000c7a:	f000 f8dd 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000c7e:	2010      	movs	r0, #16
 8000c80:	f000 f8e7 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000c84:	20c1      	movs	r0, #193	@ 0xc1
 8000c86:	f000 f8d7 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000c8a:	2010      	movs	r0, #16
 8000c8c:	f000 f8e1 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8000c90:	20c5      	movs	r0, #197	@ 0xc5
 8000c92:	f000 f8d1 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8000c96:	2045      	movs	r0, #69	@ 0x45
 8000c98:	f000 f8db 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8000c9c:	2015      	movs	r0, #21
 8000c9e:	f000 f8d8 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8000ca2:	20c7      	movs	r0, #199	@ 0xc7
 8000ca4:	f000 f8c8 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8000ca8:	2090      	movs	r0, #144	@ 0x90
 8000caa:	f000 f8d2 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8000cae:	2036      	movs	r0, #54	@ 0x36
 8000cb0:	f000 f8c2 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8000cb4:	20c8      	movs	r0, #200	@ 0xc8
 8000cb6:	f000 f8cc 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8000cba:	20f2      	movs	r0, #242	@ 0xf2
 8000cbc:	f000 f8bc 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f000 f8c6 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8000cc6:	20b0      	movs	r0, #176	@ 0xb0
 8000cc8:	f000 f8b6 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000ccc:	20c2      	movs	r0, #194	@ 0xc2
 8000cce:	f000 f8c0 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000cd2:	20b6      	movs	r0, #182	@ 0xb6
 8000cd4:	f000 f8b0 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000cd8:	200a      	movs	r0, #10
 8000cda:	f000 f8ba 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8000cde:	20a7      	movs	r0, #167	@ 0xa7
 8000ce0:	f000 f8b7 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8000ce4:	2027      	movs	r0, #39	@ 0x27
 8000ce6:	f000 f8b4 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000cea:	2004      	movs	r0, #4
 8000cec:	f000 f8b1 	bl	8000e52 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8000cf0:	202a      	movs	r0, #42	@ 0x2a
 8000cf2:	f000 f8a1 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f000 f8ab 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f000 f8a8 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f8a5 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8000d08:	20ef      	movs	r0, #239	@ 0xef
 8000d0a:	f000 f8a2 	bl	8000e52 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8000d0e:	202b      	movs	r0, #43	@ 0x2b
 8000d10:	f000 f892 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d14:	2000      	movs	r0, #0
 8000d16:	f000 f89c 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 f899 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f000 f896 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8000d26:	203f      	movs	r0, #63	@ 0x3f
 8000d28:	f000 f893 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8000d2c:	20f6      	movs	r0, #246	@ 0xf6
 8000d2e:	f000 f883 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000d32:	2001      	movs	r0, #1
 8000d34:	f000 f88d 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f000 f88a 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8000d3e:	2006      	movs	r0, #6
 8000d40:	f000 f887 	bl	8000e52 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8000d44:	202c      	movs	r0, #44	@ 0x2c
 8000d46:	f000 f877 	bl	8000e38 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000d4a:	20c8      	movs	r0, #200	@ 0xc8
 8000d4c:	f000 f9e8 	bl	8001120 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8000d50:	2026      	movs	r0, #38	@ 0x26
 8000d52:	f000 f871 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000d56:	2001      	movs	r0, #1
 8000d58:	f000 f87b 	bl	8000e52 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8000d5c:	20e0      	movs	r0, #224	@ 0xe0
 8000d5e:	f000 f86b 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8000d62:	200f      	movs	r0, #15
 8000d64:	f000 f875 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8000d68:	2029      	movs	r0, #41	@ 0x29
 8000d6a:	f000 f872 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8000d6e:	2024      	movs	r0, #36	@ 0x24
 8000d70:	f000 f86f 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000d74:	200c      	movs	r0, #12
 8000d76:	f000 f86c 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8000d7a:	200e      	movs	r0, #14
 8000d7c:	f000 f869 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000d80:	2009      	movs	r0, #9
 8000d82:	f000 f866 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8000d86:	204e      	movs	r0, #78	@ 0x4e
 8000d88:	f000 f863 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000d8c:	2078      	movs	r0, #120	@ 0x78
 8000d8e:	f000 f860 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8000d92:	203c      	movs	r0, #60	@ 0x3c
 8000d94:	f000 f85d 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000d98:	2009      	movs	r0, #9
 8000d9a:	f000 f85a 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8000d9e:	2013      	movs	r0, #19
 8000da0:	f000 f857 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000da4:	2005      	movs	r0, #5
 8000da6:	f000 f854 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8000daa:	2017      	movs	r0, #23
 8000dac:	f000 f851 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000db0:	2011      	movs	r0, #17
 8000db2:	f000 f84e 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 f84b 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8000dbc:	20e1      	movs	r0, #225	@ 0xe1
 8000dbe:	f000 f83b 	bl	8000e38 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f000 f845 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8000dc8:	2016      	movs	r0, #22
 8000dca:	f000 f842 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000dce:	201b      	movs	r0, #27
 8000dd0:	f000 f83f 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000dd4:	2004      	movs	r0, #4
 8000dd6:	f000 f83c 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000dda:	2011      	movs	r0, #17
 8000ddc:	f000 f839 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8000de0:	2007      	movs	r0, #7
 8000de2:	f000 f836 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8000de6:	2031      	movs	r0, #49	@ 0x31
 8000de8:	f000 f833 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8000dec:	2033      	movs	r0, #51	@ 0x33
 8000dee:	f000 f830 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8000df2:	2042      	movs	r0, #66	@ 0x42
 8000df4:	f000 f82d 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000df8:	2005      	movs	r0, #5
 8000dfa:	f000 f82a 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000dfe:	200c      	movs	r0, #12
 8000e00:	f000 f827 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8000e04:	200a      	movs	r0, #10
 8000e06:	f000 f824 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8000e0a:	2028      	movs	r0, #40	@ 0x28
 8000e0c:	f000 f821 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8000e10:	202f      	movs	r0, #47	@ 0x2f
 8000e12:	f000 f81e 	bl	8000e52 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8000e16:	200f      	movs	r0, #15
 8000e18:	f000 f81b 	bl	8000e52 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8000e1c:	2011      	movs	r0, #17
 8000e1e:	f000 f80b 	bl	8000e38 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000e22:	20c8      	movs	r0, #200	@ 0xc8
 8000e24:	f000 f97c 	bl	8001120 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8000e28:	2029      	movs	r0, #41	@ 0x29
 8000e2a:	f000 f805 	bl	8000e38 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8000e2e:	202c      	movs	r0, #44	@ 0x2c
 8000e30:	f000 f802 	bl	8000e38 <ili9341_Write_Reg>
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f949 	bl	80010dc <LCD_IO_WriteReg>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f91a 	bl	8001098 <LCD_IO_WriteData>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000e70:	4819      	ldr	r0, [pc, #100]	@ (8000ed8 <SPI_Init+0x6c>)
 8000e72:	f002 faee 	bl	8003452 <HAL_SPI_GetState>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d12b      	bne.n	8000ed4 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ed8 <SPI_Init+0x6c>)
 8000e7e:	4a17      	ldr	r2, [pc, #92]	@ (8000edc <SPI_Init+0x70>)
 8000e80:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e82:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <SPI_Init+0x6c>)
 8000e84:	2218      	movs	r2, #24
 8000e86:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000e88:	4b13      	ldr	r3, [pc, #76]	@ (8000ed8 <SPI_Init+0x6c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000e8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <SPI_Init+0x6c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000e94:	4b10      	ldr	r3, [pc, #64]	@ (8000ed8 <SPI_Init+0x6c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <SPI_Init+0x6c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed8 <SPI_Init+0x6c>)
 8000ea2:	2207      	movs	r2, #7
 8000ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <SPI_Init+0x6c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <SPI_Init+0x6c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <SPI_Init+0x6c>)
 8000eb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eb8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000eba:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <SPI_Init+0x6c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <SPI_Init+0x6c>)
 8000ec2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ec6:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8000ec8:	4803      	ldr	r0, [pc, #12]	@ (8000ed8 <SPI_Init+0x6c>)
 8000eca:	f000 f833 	bl	8000f34 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000ece:	4802      	ldr	r0, [pc, #8]	@ (8000ed8 <SPI_Init+0x6c>)
 8000ed0:	f002 f8ca 	bl	8003068 <HAL_SPI_Init>
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20025914 	.word	0x20025914
 8000edc:	40015000 	.word	0x40015000

08000ee0 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8000eee:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <SPI_Write+0x34>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	1db9      	adds	r1, r7, #6
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4808      	ldr	r0, [pc, #32]	@ (8000f18 <SPI_Write+0x38>)
 8000ef8:	f002 f967 	bl	80031ca <HAL_SPI_Transmit>
 8000efc:	4603      	mov	r3, r0
 8000efe:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8000f06:	f000 f809 	bl	8000f1c <SPI_Error>
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000000c 	.word	0x2000000c
 8000f18:	20025914 	.word	0x20025914

08000f1c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000f20:	4803      	ldr	r0, [pc, #12]	@ (8000f30 <SPI_Error+0x14>)
 8000f22:	f002 f92a 	bl	800317a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8000f26:	f7ff ffa1 	bl	8000e6c <SPI_Init>
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20025914 	.word	0x20025914

08000f34 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	@ 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <SPI_MspInit+0x6c>)
 8000f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f44:	4a16      	ldr	r2, [pc, #88]	@ (8000fa0 <SPI_MspInit+0x6c>)
 8000f46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000f4a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f4c:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <SPI_MspInit+0x6c>)
 8000f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <SPI_MspInit+0x6c>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f60:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa0 <SPI_MspInit+0x6c>)
 8000f62:	f043 0320 	orr.w	r3, r3, #32
 8000f66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f68:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <SPI_MspInit+0x6c>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6c:	f003 0320 	and.w	r3, r3, #32
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8000f74:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000f82:	2301      	movs	r3, #1
 8000f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8000f86:	2305      	movs	r3, #5
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <SPI_MspInit+0x70>)
 8000f92:	f000 fccd 	bl	8001930 <HAL_GPIO_Init>
}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	@ 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40021400 	.word	0x40021400

08000fa8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8000fae:	4b36      	ldr	r3, [pc, #216]	@ (8001088 <LCD_IO_Init+0xe0>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d164      	bne.n	8001080 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8000fb6:	4b34      	ldr	r3, [pc, #208]	@ (8001088 <LCD_IO_Init+0xe0>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	4b32      	ldr	r3, [pc, #200]	@ (800108c <LCD_IO_Init+0xe4>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc4:	4a31      	ldr	r2, [pc, #196]	@ (800108c <LCD_IO_Init+0xe4>)
 8000fc6:	f043 0308 	orr.w	r3, r3, #8
 8000fca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800108c <LCD_IO_Init+0xe4>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd0:	f003 0308 	and.w	r3, r3, #8
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000fd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fdc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4827      	ldr	r0, [pc, #156]	@ (8001090 <LCD_IO_Init+0xe8>)
 8000ff2:	f000 fc9d 	bl	8001930 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b24      	ldr	r3, [pc, #144]	@ (800108c <LCD_IO_Init+0xe4>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a23      	ldr	r2, [pc, #140]	@ (800108c <LCD_IO_Init+0xe4>)
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b21      	ldr	r3, [pc, #132]	@ (800108c <LCD_IO_Init+0xe4>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001012:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001016:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001020:	2302      	movs	r3, #2
 8001022:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4619      	mov	r1, r3
 800102a:	4819      	ldr	r0, [pc, #100]	@ (8001090 <LCD_IO_Init+0xe8>)
 800102c:	f000 fc80 	bl	8001930 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	4b15      	ldr	r3, [pc, #84]	@ (800108c <LCD_IO_Init+0xe4>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001038:	4a14      	ldr	r2, [pc, #80]	@ (800108c <LCD_IO_Init+0xe4>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <LCD_IO_Init+0xe4>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800104c:	2304      	movs	r3, #4
 800104e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001058:	2302      	movs	r3, #2
 800105a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4619      	mov	r1, r3
 8001062:	480c      	ldr	r0, [pc, #48]	@ (8001094 <LCD_IO_Init+0xec>)
 8001064:	f000 fc64 	bl	8001930 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001068:	2200      	movs	r2, #0
 800106a:	2104      	movs	r1, #4
 800106c:	4809      	ldr	r0, [pc, #36]	@ (8001094 <LCD_IO_Init+0xec>)
 800106e:	f000 ff17 	bl	8001ea0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001072:	2201      	movs	r2, #1
 8001074:	2104      	movs	r1, #4
 8001076:	4807      	ldr	r0, [pc, #28]	@ (8001094 <LCD_IO_Init+0xec>)
 8001078:	f000 ff12 	bl	8001ea0 <HAL_GPIO_WritePin>

    SPI_Init();
 800107c:	f7ff fef6 	bl	8000e6c <SPI_Init>
  }
}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2002596c 	.word	0x2002596c
 800108c:	40023800 	.word	0x40023800
 8001090:	40020c00 	.word	0x40020c00
 8001094:	40020800 	.word	0x40020800

08001098 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010a8:	480a      	ldr	r0, [pc, #40]	@ (80010d4 <LCD_IO_WriteData+0x3c>)
 80010aa:	f000 fef9 	bl	8001ea0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80010ae:	2200      	movs	r2, #0
 80010b0:	2104      	movs	r1, #4
 80010b2:	4809      	ldr	r0, [pc, #36]	@ (80010d8 <LCD_IO_WriteData+0x40>)
 80010b4:	f000 fef4 	bl	8001ea0 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff10 	bl	8000ee0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80010c0:	2201      	movs	r2, #1
 80010c2:	2104      	movs	r1, #4
 80010c4:	4804      	ldr	r0, [pc, #16]	@ (80010d8 <LCD_IO_WriteData+0x40>)
 80010c6:	f000 feeb 	bl	8001ea0 <HAL_GPIO_WritePin>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40020c00 	.word	0x40020c00
 80010d8:	40020800 	.word	0x40020800

080010dc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80010e6:	2200      	movs	r2, #0
 80010e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010ec:	480a      	ldr	r0, [pc, #40]	@ (8001118 <LCD_IO_WriteReg+0x3c>)
 80010ee:	f000 fed7 	bl	8001ea0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80010f2:	2200      	movs	r2, #0
 80010f4:	2104      	movs	r1, #4
 80010f6:	4809      	ldr	r0, [pc, #36]	@ (800111c <LCD_IO_WriteReg+0x40>)
 80010f8:	f000 fed2 	bl	8001ea0 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff feed 	bl	8000ee0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001106:	2201      	movs	r2, #1
 8001108:	2104      	movs	r1, #4
 800110a:	4804      	ldr	r0, [pc, #16]	@ (800111c <LCD_IO_WriteReg+0x40>)
 800110c:	f000 fec8 	bl	8001ea0 <HAL_GPIO_WritePin>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40020c00 	.word	0x40020c00
 800111c:	40020800 	.word	0x40020800

08001120 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 faf7 	bl	800171c <HAL_Delay>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <main>:
  MX_RNG_Init();
  MX_SPI5_Init();
  MX_TIM7_Init();

int main(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113a:	f000 fa7d 	bl	8001638 <HAL_Init>
  SystemClockOverride();
 800113e:	f000 f80d 	bl	800115c <SystemClockOverride>
//  MX_LTDC_Init();
//  MX_RNG_Init();
//  MX_SPI5_Init();
//  MX_TIM7_Init();

  ApplicationInit();
 8001142:	f7ff f9cb 	bl	80004dc <ApplicationInit>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project


  ApplicationInit(); // Initializes the LCD functionality
 8001146:	f7ff f9c9 	bl	80004dc <ApplicationInit>

//  LCD_Start_Screen();
  LCD_Visual_Demo();
 800114a:	f7ff f9d7 	bl	80004fc <LCD_Visual_Demo>

  HAL_Delay(5000);
 800114e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001152:	f000 fae3 	bl	800171c <HAL_Delay>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
 8001156:	bf00      	nop
 8001158:	e7fd      	b.n	8001156 <main+0x20>
	...

0800115c <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b092      	sub	sp, #72	@ 0x48
 8001160:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <SystemClockOverride+0x7c>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	4a1b      	ldr	r2, [pc, #108]	@ (80011d8 <SystemClockOverride+0x7c>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001170:	6413      	str	r3, [r2, #64]	@ 0x40
 8001172:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <SystemClockOverride+0x7c>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800117e:	2301      	movs	r3, #1
 8001180:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001182:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001186:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001188:	2302      	movs	r3, #2
 800118a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001190:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001192:	2308      	movs	r3, #8
 8001194:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001196:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800119a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800119c:	2302      	movs	r3, #2
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011a0:	2307      	movs	r3, #7
 80011a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	4618      	mov	r0, r3
 80011a8:	f001 f93a 	bl	8002420 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80011ac:	230f      	movs	r3, #15
 80011ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b0:	2302      	movs	r3, #2
 80011b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c2:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80011c4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011c8:	2105      	movs	r1, #5
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 fba0 	bl	8002910 <HAL_RCC_ClockConfig>
}
 80011d0:	bf00      	nop
 80011d2:	3748      	adds	r7, #72	@ 0x48
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800

080011dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
}
 80011e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <Error_Handler+0x8>

080011e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <HAL_MspInit+0x4c>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001234 <HAL_MspInit+0x4c>)
 80011f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <HAL_MspInit+0x4c>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <HAL_MspInit+0x4c>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	4a08      	ldr	r2, [pc, #32]	@ (8001234 <HAL_MspInit+0x4c>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001218:	6413      	str	r3, [r2, #64]	@ 0x40
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <HAL_MspInit+0x4c>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001226:	2007      	movs	r0, #7
 8001228:	f000 fb4e 	bl	80018c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40023800 	.word	0x40023800

08001238 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b09a      	sub	sp, #104	@ 0x68
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001250:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001254:	2230      	movs	r2, #48	@ 0x30
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f002 f9e5 	bl	8003628 <memset>
  if(hltdc->Instance==LTDC)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a81      	ldr	r2, [pc, #516]	@ (8001468 <HAL_LTDC_MspInit+0x230>)
 8001264:	4293      	cmp	r3, r2
 8001266:	f040 80fa 	bne.w	800145e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800126a:	2308      	movs	r3, #8
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800126e:	2332      	movs	r3, #50	@ 0x32
 8001270:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001272:	2302      	movs	r3, #2
 8001274:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001276:	2300      	movs	r3, #0
 8001278:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800127e:	4618      	mov	r0, r3
 8001280:	f001 fd32 	bl	8002ce8 <HAL_RCCEx_PeriphCLKConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800128a:	f7ff ffa7 	bl	80011dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
 8001292:	4b76      	ldr	r3, [pc, #472]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001296:	4a75      	ldr	r2, [pc, #468]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 8001298:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800129c:	6453      	str	r3, [r2, #68]	@ 0x44
 800129e:	4b73      	ldr	r3, [pc, #460]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012a6:	623b      	str	r3, [r7, #32]
 80012a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	4b6f      	ldr	r3, [pc, #444]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a6e      	ldr	r2, [pc, #440]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 80012b4:	f043 0320 	orr.w	r3, r3, #32
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b6c      	ldr	r3, [pc, #432]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0320 	and.w	r3, r3, #32
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	4b68      	ldr	r3, [pc, #416]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	4a67      	ldr	r2, [pc, #412]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d6:	4b65      	ldr	r3, [pc, #404]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	4b61      	ldr	r3, [pc, #388]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a60      	ldr	r2, [pc, #384]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b5e      	ldr	r3, [pc, #376]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	4b5a      	ldr	r3, [pc, #360]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	4a59      	ldr	r2, [pc, #356]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 8001308:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800130c:	6313      	str	r3, [r2, #48]	@ 0x30
 800130e:	4b57      	ldr	r3, [pc, #348]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b53      	ldr	r3, [pc, #332]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	4a52      	ldr	r2, [pc, #328]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	6313      	str	r3, [r2, #48]	@ 0x30
 800132a:	4b50      	ldr	r3, [pc, #320]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	4b4c      	ldr	r3, [pc, #304]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a4b      	ldr	r2, [pc, #300]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 8001340:	f043 0308 	orr.w	r3, r3, #8
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b49      	ldr	r3, [pc, #292]	@ (800146c <HAL_LTDC_MspInit+0x234>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001352:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001356:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001364:	230e      	movs	r3, #14
 8001366:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001368:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800136c:	4619      	mov	r1, r3
 800136e:	4840      	ldr	r0, [pc, #256]	@ (8001470 <HAL_LTDC_MspInit+0x238>)
 8001370:	f000 fade 	bl	8001930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001374:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001378:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001386:	230e      	movs	r3, #14
 8001388:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800138e:	4619      	mov	r1, r3
 8001390:	4838      	ldr	r0, [pc, #224]	@ (8001474 <HAL_LTDC_MspInit+0x23c>)
 8001392:	f000 facd 	bl	8001930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001396:	2303      	movs	r3, #3
 8001398:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80013a6:	2309      	movs	r3, #9
 80013a8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013ae:	4619      	mov	r1, r3
 80013b0:	4831      	ldr	r0, [pc, #196]	@ (8001478 <HAL_LTDC_MspInit+0x240>)
 80013b2:	f000 fabd 	bl	8001930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80013b6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80013ba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013c8:	230e      	movs	r3, #14
 80013ca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013d0:	4619      	mov	r1, r3
 80013d2:	4829      	ldr	r0, [pc, #164]	@ (8001478 <HAL_LTDC_MspInit+0x240>)
 80013d4:	f000 faac 	bl	8001930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80013d8:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80013dc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013ea:	230e      	movs	r3, #14
 80013ec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013f2:	4619      	mov	r1, r3
 80013f4:	4821      	ldr	r0, [pc, #132]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 80013f6:	f000 fa9b 	bl	8001930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80013fa:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80013fe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800140c:	230e      	movs	r3, #14
 800140e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001410:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001414:	4619      	mov	r1, r3
 8001416:	481a      	ldr	r0, [pc, #104]	@ (8001480 <HAL_LTDC_MspInit+0x248>)
 8001418:	f000 fa8a 	bl	8001930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800141c:	2348      	movs	r3, #72	@ 0x48
 800141e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800142c:	230e      	movs	r3, #14
 800142e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001430:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001434:	4619      	mov	r1, r3
 8001436:	4813      	ldr	r0, [pc, #76]	@ (8001484 <HAL_LTDC_MspInit+0x24c>)
 8001438:	f000 fa7a 	bl	8001930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800143c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001440:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800144e:	2309      	movs	r3, #9
 8001450:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001452:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001456:	4619      	mov	r1, r3
 8001458:	4808      	ldr	r0, [pc, #32]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 800145a:	f000 fa69 	bl	8001930 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800145e:	bf00      	nop
 8001460:	3768      	adds	r7, #104	@ 0x68
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40016800 	.word	0x40016800
 800146c:	40023800 	.word	0x40023800
 8001470:	40021400 	.word	0x40021400
 8001474:	40020000 	.word	0x40020000
 8001478:	40020400 	.word	0x40020400
 800147c:	40021800 	.word	0x40021800
 8001480:	40020800 	.word	0x40020800
 8001484:	40020c00 	.word	0x40020c00

08001488 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	@ 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a19      	ldr	r2, [pc, #100]	@ (800150c <HAL_SPI_MspInit+0x84>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d12c      	bne.n	8001504 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <HAL_SPI_MspInit+0x88>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b2:	4a17      	ldr	r2, [pc, #92]	@ (8001510 <HAL_SPI_MspInit+0x88>)
 80014b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80014b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ba:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <HAL_SPI_MspInit+0x88>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <HAL_SPI_MspInit+0x88>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a10      	ldr	r2, [pc, #64]	@ (8001510 <HAL_SPI_MspInit+0x88>)
 80014d0:	f043 0320 	orr.w	r3, r3, #32
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <HAL_SPI_MspInit+0x88>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0320 	and.w	r3, r3, #32
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80014e2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80014e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80014f4:	2305      	movs	r3, #5
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	4805      	ldr	r0, [pc, #20]	@ (8001514 <HAL_SPI_MspInit+0x8c>)
 8001500:	f000 fa16 	bl	8001930 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	@ 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40015000 	.word	0x40015000
 8001510:	40023800 	.word	0x40023800
 8001514:	40021400 	.word	0x40021400

08001518 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a08      	ldr	r2, [pc, #32]	@ (8001548 <HAL_SPI_MspDeInit+0x30>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10a      	bne.n	8001540 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800152a:	4b08      	ldr	r3, [pc, #32]	@ (800154c <HAL_SPI_MspDeInit+0x34>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	4a07      	ldr	r2, [pc, #28]	@ (800154c <HAL_SPI_MspDeInit+0x34>)
 8001530:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001534:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001536:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800153a:	4805      	ldr	r0, [pc, #20]	@ (8001550 <HAL_SPI_MspDeInit+0x38>)
 800153c:	f000 fba4 	bl	8001c88 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40015000 	.word	0x40015000
 800154c:	40023800 	.word	0x40023800
 8001550:	40021400 	.word	0x40021400

08001554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <NMI_Handler+0x4>

0800155c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <MemManage_Handler+0x4>

0800156c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <BusFault_Handler+0x4>

08001574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <UsageFault_Handler+0x4>

0800157c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015aa:	f000 f897 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <SystemInit+0x20>)
 80015c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ca:	4a05      	ldr	r2, [pc, #20]	@ (80015e0 <SystemInit+0x20>)
 80015cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800161c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015e8:	f7ff ffea 	bl	80015c0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015ec:	480c      	ldr	r0, [pc, #48]	@ (8001620 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ee:	490d      	ldr	r1, [pc, #52]	@ (8001624 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001628 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f4:	e002      	b.n	80015fc <LoopCopyDataInit>

080015f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fa:	3304      	adds	r3, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001600:	d3f9      	bcc.n	80015f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001602:	4a0a      	ldr	r2, [pc, #40]	@ (800162c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001604:	4c0a      	ldr	r4, [pc, #40]	@ (8001630 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001608:	e001      	b.n	800160e <LoopFillZerobss>

0800160a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800160c:	3204      	adds	r2, #4

0800160e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001612:	f002 f811 	bl	8003638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001616:	f7ff fd8e 	bl	8001136 <main>
  bx  lr    
 800161a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800161c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001628:	08004888 	.word	0x08004888
  ldr r2, =_sbss
 800162c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001630:	20025974 	.word	0x20025974

08001634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC_IRQHandler>
	...

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800163c:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0d      	ldr	r2, [pc, #52]	@ (8001678 <HAL_Init+0x40>)
 8001642:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001646:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001648:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <HAL_Init+0x40>)
 800164e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001652:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001654:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a07      	ldr	r2, [pc, #28]	@ (8001678 <HAL_Init+0x40>)
 800165a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800165e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001660:	2003      	movs	r0, #3
 8001662:	f000 f931 	bl	80018c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001666:	2000      	movs	r0, #0
 8001668:	f000 f808 	bl	800167c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800166c:	f7ff fdbc 	bl	80011e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023c00 	.word	0x40023c00

0800167c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001684:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <HAL_InitTick+0x54>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <HAL_InitTick+0x58>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001692:	fbb3 f3f1 	udiv	r3, r3, r1
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f93b 	bl	8001916 <HAL_SYSTICK_Config>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00e      	b.n	80016c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d80a      	bhi.n	80016c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f000 f911 	bl	80018de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016bc:	4a06      	ldr	r2, [pc, #24]	@ (80016d8 <HAL_InitTick+0x5c>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000010 	.word	0x20000010
 80016d4:	20000018 	.word	0x20000018
 80016d8:	20000014 	.word	0x20000014

080016dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_IncTick+0x20>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_IncTick+0x24>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a04      	ldr	r2, [pc, #16]	@ (8001700 <HAL_IncTick+0x24>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000018 	.word	0x20000018
 8001700:	20025970 	.word	0x20025970

08001704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b03      	ldr	r3, [pc, #12]	@ (8001718 <HAL_GetTick+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20025970 	.word	0x20025970

0800171c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff ffee 	bl	8001704 <HAL_GetTick>
 8001728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001734:	d005      	beq.n	8001742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001736:	4b0a      	ldr	r3, [pc, #40]	@ (8001760 <HAL_Delay+0x44>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001742:	bf00      	nop
 8001744:	f7ff ffde 	bl	8001704 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	429a      	cmp	r2, r3
 8001752:	d8f7      	bhi.n	8001744 <HAL_Delay+0x28>
  {
  }
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000018 	.word	0x20000018

08001764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001780:	4013      	ands	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800178c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001796:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	60d3      	str	r3, [r2, #12]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	@ (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	6039      	str	r1, [r7, #0]
 80017d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	db0a      	blt.n	80017f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	490c      	ldr	r1, [pc, #48]	@ (8001814 <__NVIC_SetPriority+0x4c>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	0112      	lsls	r2, r2, #4
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	440b      	add	r3, r1
 80017ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f0:	e00a      	b.n	8001808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4908      	ldr	r1, [pc, #32]	@ (8001818 <__NVIC_SetPriority+0x50>)
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	3b04      	subs	r3, #4
 8001800:	0112      	lsls	r2, r2, #4
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	440b      	add	r3, r1
 8001806:	761a      	strb	r2, [r3, #24]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000e100 	.word	0xe000e100
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	@ 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f1c3 0307 	rsb	r3, r3, #7
 8001836:	2b04      	cmp	r3, #4
 8001838:	bf28      	it	cs
 800183a:	2304      	movcs	r3, #4
 800183c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3304      	adds	r3, #4
 8001842:	2b06      	cmp	r3, #6
 8001844:	d902      	bls.n	800184c <NVIC_EncodePriority+0x30>
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3b03      	subs	r3, #3
 800184a:	e000      	b.n	800184e <NVIC_EncodePriority+0x32>
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	f04f 32ff 	mov.w	r2, #4294967295
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43da      	mvns	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	401a      	ands	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001864:	f04f 31ff 	mov.w	r1, #4294967295
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa01 f303 	lsl.w	r3, r1, r3
 800186e:	43d9      	mvns	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	4313      	orrs	r3, r2
         );
}
 8001876:	4618      	mov	r0, r3
 8001878:	3724      	adds	r7, #36	@ 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001894:	d301      	bcc.n	800189a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001896:	2301      	movs	r3, #1
 8001898:	e00f      	b.n	80018ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189a:	4a0a      	ldr	r2, [pc, #40]	@ (80018c4 <SysTick_Config+0x40>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a2:	210f      	movs	r1, #15
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	f7ff ff8e 	bl	80017c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ac:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <SysTick_Config+0x40>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b2:	4b04      	ldr	r3, [pc, #16]	@ (80018c4 <SysTick_Config+0x40>)
 80018b4:	2207      	movs	r2, #7
 80018b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	e000e010 	.word	0xe000e010

080018c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff47 	bl	8001764 <__NVIC_SetPriorityGrouping>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f0:	f7ff ff5c 	bl	80017ac <__NVIC_GetPriorityGrouping>
 80018f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	68b9      	ldr	r1, [r7, #8]
 80018fa:	6978      	ldr	r0, [r7, #20]
 80018fc:	f7ff ff8e 	bl	800181c <NVIC_EncodePriority>
 8001900:	4602      	mov	r2, r0
 8001902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff5d 	bl	80017c8 <__NVIC_SetPriority>
}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ffb0 	bl	8001884 <SysTick_Config>
 8001924:	4603      	mov	r3, r0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	@ 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	e177      	b.n	8001c3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800194c:	2201      	movs	r2, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	429a      	cmp	r2, r3
 8001966:	f040 8166 	bne.w	8001c36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	2b01      	cmp	r3, #1
 8001974:	d005      	beq.n	8001982 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800197e:	2b02      	cmp	r3, #2
 8001980:	d130      	bne.n	80019e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	2203      	movs	r2, #3
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b8:	2201      	movs	r2, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	f003 0201 	and.w	r2, r3, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d017      	beq.n	8001a20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d123      	bne.n	8001a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	08da      	lsrs	r2, r3, #3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3208      	adds	r2, #8
 8001a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	08da      	lsrs	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3208      	adds	r2, #8
 8001a6e:	69b9      	ldr	r1, [r7, #24]
 8001a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0203 	and.w	r2, r3, #3
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80c0 	beq.w	8001c36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b66      	ldr	r3, [pc, #408]	@ (8001c54 <HAL_GPIO_Init+0x324>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	4a65      	ldr	r2, [pc, #404]	@ (8001c54 <HAL_GPIO_Init+0x324>)
 8001ac0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ac6:	4b63      	ldr	r3, [pc, #396]	@ (8001c54 <HAL_GPIO_Init+0x324>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ad2:	4a61      	ldr	r2, [pc, #388]	@ (8001c58 <HAL_GPIO_Init+0x328>)
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	3302      	adds	r3, #2
 8001ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	220f      	movs	r2, #15
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a58      	ldr	r2, [pc, #352]	@ (8001c5c <HAL_GPIO_Init+0x32c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d037      	beq.n	8001b6e <HAL_GPIO_Init+0x23e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a57      	ldr	r2, [pc, #348]	@ (8001c60 <HAL_GPIO_Init+0x330>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d031      	beq.n	8001b6a <HAL_GPIO_Init+0x23a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a56      	ldr	r2, [pc, #344]	@ (8001c64 <HAL_GPIO_Init+0x334>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d02b      	beq.n	8001b66 <HAL_GPIO_Init+0x236>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a55      	ldr	r2, [pc, #340]	@ (8001c68 <HAL_GPIO_Init+0x338>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d025      	beq.n	8001b62 <HAL_GPIO_Init+0x232>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a54      	ldr	r2, [pc, #336]	@ (8001c6c <HAL_GPIO_Init+0x33c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d01f      	beq.n	8001b5e <HAL_GPIO_Init+0x22e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a53      	ldr	r2, [pc, #332]	@ (8001c70 <HAL_GPIO_Init+0x340>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d019      	beq.n	8001b5a <HAL_GPIO_Init+0x22a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a52      	ldr	r2, [pc, #328]	@ (8001c74 <HAL_GPIO_Init+0x344>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d013      	beq.n	8001b56 <HAL_GPIO_Init+0x226>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a51      	ldr	r2, [pc, #324]	@ (8001c78 <HAL_GPIO_Init+0x348>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d00d      	beq.n	8001b52 <HAL_GPIO_Init+0x222>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a50      	ldr	r2, [pc, #320]	@ (8001c7c <HAL_GPIO_Init+0x34c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d007      	beq.n	8001b4e <HAL_GPIO_Init+0x21e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a4f      	ldr	r2, [pc, #316]	@ (8001c80 <HAL_GPIO_Init+0x350>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d101      	bne.n	8001b4a <HAL_GPIO_Init+0x21a>
 8001b46:	2309      	movs	r3, #9
 8001b48:	e012      	b.n	8001b70 <HAL_GPIO_Init+0x240>
 8001b4a:	230a      	movs	r3, #10
 8001b4c:	e010      	b.n	8001b70 <HAL_GPIO_Init+0x240>
 8001b4e:	2308      	movs	r3, #8
 8001b50:	e00e      	b.n	8001b70 <HAL_GPIO_Init+0x240>
 8001b52:	2307      	movs	r3, #7
 8001b54:	e00c      	b.n	8001b70 <HAL_GPIO_Init+0x240>
 8001b56:	2306      	movs	r3, #6
 8001b58:	e00a      	b.n	8001b70 <HAL_GPIO_Init+0x240>
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	e008      	b.n	8001b70 <HAL_GPIO_Init+0x240>
 8001b5e:	2304      	movs	r3, #4
 8001b60:	e006      	b.n	8001b70 <HAL_GPIO_Init+0x240>
 8001b62:	2303      	movs	r3, #3
 8001b64:	e004      	b.n	8001b70 <HAL_GPIO_Init+0x240>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e002      	b.n	8001b70 <HAL_GPIO_Init+0x240>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_GPIO_Init+0x240>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	69fa      	ldr	r2, [r7, #28]
 8001b72:	f002 0203 	and.w	r2, r2, #3
 8001b76:	0092      	lsls	r2, r2, #2
 8001b78:	4093      	lsls	r3, r2
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b80:	4935      	ldr	r1, [pc, #212]	@ (8001c58 <HAL_GPIO_Init+0x328>)
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	089b      	lsrs	r3, r3, #2
 8001b86:	3302      	adds	r3, #2
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c84 <HAL_GPIO_Init+0x354>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bb2:	4a34      	ldr	r2, [pc, #208]	@ (8001c84 <HAL_GPIO_Init+0x354>)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bb8:	4b32      	ldr	r3, [pc, #200]	@ (8001c84 <HAL_GPIO_Init+0x354>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bdc:	4a29      	ldr	r2, [pc, #164]	@ (8001c84 <HAL_GPIO_Init+0x354>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001be2:	4b28      	ldr	r3, [pc, #160]	@ (8001c84 <HAL_GPIO_Init+0x354>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c06:	4a1f      	ldr	r2, [pc, #124]	@ (8001c84 <HAL_GPIO_Init+0x354>)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <HAL_GPIO_Init+0x354>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c30:	4a14      	ldr	r2, [pc, #80]	@ (8001c84 <HAL_GPIO_Init+0x354>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	2b0f      	cmp	r3, #15
 8001c40:	f67f ae84 	bls.w	800194c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	3724      	adds	r7, #36	@ 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40013800 	.word	0x40013800
 8001c5c:	40020000 	.word	0x40020000
 8001c60:	40020400 	.word	0x40020400
 8001c64:	40020800 	.word	0x40020800
 8001c68:	40020c00 	.word	0x40020c00
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40021400 	.word	0x40021400
 8001c74:	40021800 	.word	0x40021800
 8001c78:	40021c00 	.word	0x40021c00
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	40022400 	.word	0x40022400
 8001c84:	40013c00 	.word	0x40013c00

08001c88 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	e0d9      	b.n	8001e58 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	f040 80c9 	bne.w	8001e52 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001cc0:	4a6b      	ldr	r2, [pc, #428]	@ (8001e70 <HAL_GPIO_DeInit+0x1e8>)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	089b      	lsrs	r3, r3, #2
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ccc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	220f      	movs	r2, #15
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a63      	ldr	r2, [pc, #396]	@ (8001e74 <HAL_GPIO_DeInit+0x1ec>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d037      	beq.n	8001d5a <HAL_GPIO_DeInit+0xd2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a62      	ldr	r2, [pc, #392]	@ (8001e78 <HAL_GPIO_DeInit+0x1f0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d031      	beq.n	8001d56 <HAL_GPIO_DeInit+0xce>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a61      	ldr	r2, [pc, #388]	@ (8001e7c <HAL_GPIO_DeInit+0x1f4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d02b      	beq.n	8001d52 <HAL_GPIO_DeInit+0xca>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a60      	ldr	r2, [pc, #384]	@ (8001e80 <HAL_GPIO_DeInit+0x1f8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d025      	beq.n	8001d4e <HAL_GPIO_DeInit+0xc6>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a5f      	ldr	r2, [pc, #380]	@ (8001e84 <HAL_GPIO_DeInit+0x1fc>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d01f      	beq.n	8001d4a <HAL_GPIO_DeInit+0xc2>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a5e      	ldr	r2, [pc, #376]	@ (8001e88 <HAL_GPIO_DeInit+0x200>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d019      	beq.n	8001d46 <HAL_GPIO_DeInit+0xbe>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a5d      	ldr	r2, [pc, #372]	@ (8001e8c <HAL_GPIO_DeInit+0x204>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d013      	beq.n	8001d42 <HAL_GPIO_DeInit+0xba>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a5c      	ldr	r2, [pc, #368]	@ (8001e90 <HAL_GPIO_DeInit+0x208>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00d      	beq.n	8001d3e <HAL_GPIO_DeInit+0xb6>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a5b      	ldr	r2, [pc, #364]	@ (8001e94 <HAL_GPIO_DeInit+0x20c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d007      	beq.n	8001d3a <HAL_GPIO_DeInit+0xb2>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a5a      	ldr	r2, [pc, #360]	@ (8001e98 <HAL_GPIO_DeInit+0x210>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d101      	bne.n	8001d36 <HAL_GPIO_DeInit+0xae>
 8001d32:	2309      	movs	r3, #9
 8001d34:	e012      	b.n	8001d5c <HAL_GPIO_DeInit+0xd4>
 8001d36:	230a      	movs	r3, #10
 8001d38:	e010      	b.n	8001d5c <HAL_GPIO_DeInit+0xd4>
 8001d3a:	2308      	movs	r3, #8
 8001d3c:	e00e      	b.n	8001d5c <HAL_GPIO_DeInit+0xd4>
 8001d3e:	2307      	movs	r3, #7
 8001d40:	e00c      	b.n	8001d5c <HAL_GPIO_DeInit+0xd4>
 8001d42:	2306      	movs	r3, #6
 8001d44:	e00a      	b.n	8001d5c <HAL_GPIO_DeInit+0xd4>
 8001d46:	2305      	movs	r3, #5
 8001d48:	e008      	b.n	8001d5c <HAL_GPIO_DeInit+0xd4>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_DeInit+0xd4>
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e004      	b.n	8001d5c <HAL_GPIO_DeInit+0xd4>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e002      	b.n	8001d5c <HAL_GPIO_DeInit+0xd4>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_DeInit+0xd4>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	f002 0203 	and.w	r2, r2, #3
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	4093      	lsls	r3, r2
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d132      	bne.n	8001dd2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001d6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e9c <HAL_GPIO_DeInit+0x214>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	4949      	ldr	r1, [pc, #292]	@ (8001e9c <HAL_GPIO_DeInit+0x214>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001d7a:	4b48      	ldr	r3, [pc, #288]	@ (8001e9c <HAL_GPIO_DeInit+0x214>)
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	4946      	ldr	r1, [pc, #280]	@ (8001e9c <HAL_GPIO_DeInit+0x214>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001d88:	4b44      	ldr	r3, [pc, #272]	@ (8001e9c <HAL_GPIO_DeInit+0x214>)
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	4942      	ldr	r1, [pc, #264]	@ (8001e9c <HAL_GPIO_DeInit+0x214>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001d96:	4b41      	ldr	r3, [pc, #260]	@ (8001e9c <HAL_GPIO_DeInit+0x214>)
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	493f      	ldr	r1, [pc, #252]	@ (8001e9c <HAL_GPIO_DeInit+0x214>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	220f      	movs	r2, #15
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001db4:	4a2e      	ldr	r2, [pc, #184]	@ (8001e70 <HAL_GPIO_DeInit+0x1e8>)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	3302      	adds	r3, #2
 8001dbc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	482a      	ldr	r0, [pc, #168]	@ (8001e70 <HAL_GPIO_DeInit+0x1e8>)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	400a      	ands	r2, r1
 8001dcc:	3302      	adds	r3, #2
 8001dce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2103      	movs	r1, #3
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	401a      	ands	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	08da      	lsrs	r2, r3, #3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3208      	adds	r2, #8
 8001df0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	08d2      	lsrs	r2, r2, #3
 8001e08:	4019      	ands	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3208      	adds	r2, #8
 8001e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2103      	movs	r1, #3
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	401a      	ands	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	401a      	ands	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	2103      	movs	r1, #3
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3301      	adds	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2b0f      	cmp	r3, #15
 8001e5c:	f67f af22 	bls.w	8001ca4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001e60:	bf00      	nop
 8001e62:	bf00      	nop
 8001e64:	371c      	adds	r7, #28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40013800 	.word	0x40013800
 8001e74:	40020000 	.word	0x40020000
 8001e78:	40020400 	.word	0x40020400
 8001e7c:	40020800 	.word	0x40020800
 8001e80:	40020c00 	.word	0x40020c00
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40021400 	.word	0x40021400
 8001e8c:	40021800 	.word	0x40021800
 8001e90:	40021c00 	.word	0x40021c00
 8001e94:	40022000 	.word	0x40022000
 8001e98:	40022400 	.word	0x40022400
 8001e9c:	40013c00 	.word	0x40013c00

08001ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	807b      	strh	r3, [r7, #2]
 8001eac:	4613      	mov	r3, r2
 8001eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eb0:	787b      	ldrb	r3, [r7, #1]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb6:	887a      	ldrh	r2, [r7, #2]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ebc:	e003      	b.n	8001ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ebe:	887b      	ldrh	r3, [r7, #2]
 8001ec0:	041a      	lsls	r2, r3, #16
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	619a      	str	r2, [r3, #24]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e0bf      	b.n	8002066 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff f99c 	bl	8001238 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8001f16:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6999      	ldr	r1, [r3, #24]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001f2c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6899      	ldr	r1, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b4a      	ldr	r3, [pc, #296]	@ (8002070 <HAL_LTDC_Init+0x19c>)
 8001f48:	400b      	ands	r3, r1
 8001f4a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	041b      	lsls	r3, r3, #16
 8001f52:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6899      	ldr	r1, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699a      	ldr	r2, [r3, #24]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68d9      	ldr	r1, [r3, #12]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b3e      	ldr	r3, [pc, #248]	@ (8002070 <HAL_LTDC_Init+0x19c>)
 8001f76:	400b      	ands	r3, r1
 8001f78:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	041b      	lsls	r3, r3, #16
 8001f80:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68d9      	ldr	r1, [r3, #12]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a1a      	ldr	r2, [r3, #32]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6919      	ldr	r1, [r3, #16]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4b33      	ldr	r3, [pc, #204]	@ (8002070 <HAL_LTDC_Init+0x19c>)
 8001fa4:	400b      	ands	r3, r1
 8001fa6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fac:	041b      	lsls	r3, r3, #16
 8001fae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6919      	ldr	r1, [r3, #16]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6959      	ldr	r1, [r3, #20]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b27      	ldr	r3, [pc, #156]	@ (8002070 <HAL_LTDC_Init+0x19c>)
 8001fd2:	400b      	ands	r3, r1
 8001fd4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fda:	041b      	lsls	r3, r3, #16
 8001fdc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6959      	ldr	r1, [r3, #20]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002004:	041b      	lsls	r3, r3, #16
 8002006:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002016:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0206 	orr.w	r2, r2, #6
 8002042:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	f000f800 	.word	0xf000f800

08002074 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002074:	b5b0      	push	{r4, r5, r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_LTDC_ConfigLayer+0x1a>
 800208a:	2302      	movs	r3, #2
 800208c:	e02c      	b.n	80020e8 <HAL_LTDC_ConfigLayer+0x74>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2202      	movs	r2, #2
 800209a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2134      	movs	r1, #52	@ 0x34
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	4614      	mov	r4, r2
 80020b2:	461d      	mov	r5, r3
 80020b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020c0:	682b      	ldr	r3, [r5, #0]
 80020c2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f811 	bl	80020f0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2201      	movs	r2, #1
 80020d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bdb0      	pop	{r4, r5, r7, pc}

080020f0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	@ 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	0c1b      	lsrs	r3, r3, #16
 8002108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210c:	4413      	add	r3, r2
 800210e:	041b      	lsls	r3, r3, #16
 8002110:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	01db      	lsls	r3, r3, #7
 800211c:	4413      	add	r3, r2
 800211e:	3384      	adds	r3, #132	@ 0x84
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	4611      	mov	r1, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	01d2      	lsls	r2, r2, #7
 800212c:	440a      	add	r2, r1
 800212e:	3284      	adds	r2, #132	@ 0x84
 8002130:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002134:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	0c1b      	lsrs	r3, r3, #16
 8002142:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002146:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002148:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4619      	mov	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	01db      	lsls	r3, r3, #7
 8002154:	440b      	add	r3, r1
 8002156:	3384      	adds	r3, #132	@ 0x84
 8002158:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800215e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800216e:	4413      	add	r3, r2
 8002170:	041b      	lsls	r3, r3, #16
 8002172:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	01db      	lsls	r3, r3, #7
 800217e:	4413      	add	r3, r2
 8002180:	3384      	adds	r3, #132	@ 0x84
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	4611      	mov	r1, r2
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	01d2      	lsls	r2, r2, #7
 800218e:	440a      	add	r2, r1
 8002190:	3284      	adds	r2, #132	@ 0x84
 8002192:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002196:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021a6:	4413      	add	r3, r2
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4619      	mov	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	01db      	lsls	r3, r3, #7
 80021b4:	440b      	add	r3, r1
 80021b6:	3384      	adds	r3, #132	@ 0x84
 80021b8:	4619      	mov	r1, r3
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	4313      	orrs	r3, r2
 80021be:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	01db      	lsls	r3, r3, #7
 80021ca:	4413      	add	r3, r2
 80021cc:	3384      	adds	r3, #132	@ 0x84
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	4611      	mov	r1, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	01d2      	lsls	r2, r2, #7
 80021da:	440a      	add	r2, r1
 80021dc:	3284      	adds	r2, #132	@ 0x84
 80021de:	f023 0307 	bic.w	r3, r3, #7
 80021e2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	01db      	lsls	r3, r3, #7
 80021ee:	4413      	add	r3, r2
 80021f0:	3384      	adds	r3, #132	@ 0x84
 80021f2:	461a      	mov	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800220a:	041b      	lsls	r3, r3, #16
 800220c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	061b      	lsls	r3, r3, #24
 8002214:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	01db      	lsls	r3, r3, #7
 8002220:	4413      	add	r3, r2
 8002222:	3384      	adds	r3, #132	@ 0x84
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	01db      	lsls	r3, r3, #7
 8002230:	4413      	add	r3, r2
 8002232:	3384      	adds	r3, #132	@ 0x84
 8002234:	461a      	mov	r2, r3
 8002236:	2300      	movs	r3, #0
 8002238:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002240:	461a      	mov	r2, r3
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	431a      	orrs	r2, r3
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	431a      	orrs	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4619      	mov	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	01db      	lsls	r3, r3, #7
 8002254:	440b      	add	r3, r1
 8002256:	3384      	adds	r3, #132	@ 0x84
 8002258:	4619      	mov	r1, r3
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	01db      	lsls	r3, r3, #7
 800226a:	4413      	add	r3, r2
 800226c:	3384      	adds	r3, #132	@ 0x84
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	4611      	mov	r1, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	01d2      	lsls	r2, r2, #7
 800227a:	440a      	add	r2, r1
 800227c:	3284      	adds	r2, #132	@ 0x84
 800227e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002282:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	01db      	lsls	r3, r3, #7
 800228e:	4413      	add	r3, r2
 8002290:	3384      	adds	r3, #132	@ 0x84
 8002292:	461a      	mov	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	01db      	lsls	r3, r3, #7
 80022a4:	4413      	add	r3, r2
 80022a6:	3384      	adds	r3, #132	@ 0x84
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	4611      	mov	r1, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	01d2      	lsls	r2, r2, #7
 80022b4:	440a      	add	r2, r1
 80022b6:	3284      	adds	r2, #132	@ 0x84
 80022b8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80022bc:	f023 0307 	bic.w	r3, r3, #7
 80022c0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	68f9      	ldr	r1, [r7, #12]
 80022cc:	6809      	ldr	r1, [r1, #0]
 80022ce:	4608      	mov	r0, r1
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	01c9      	lsls	r1, r1, #7
 80022d4:	4401      	add	r1, r0
 80022d6:	3184      	adds	r1, #132	@ 0x84
 80022d8:	4313      	orrs	r3, r2
 80022da:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	01db      	lsls	r3, r3, #7
 80022e6:	4413      	add	r3, r2
 80022e8:	3384      	adds	r3, #132	@ 0x84
 80022ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	01db      	lsls	r3, r3, #7
 80022f6:	4413      	add	r3, r2
 80022f8:	3384      	adds	r3, #132	@ 0x84
 80022fa:	461a      	mov	r2, r3
 80022fc:	2300      	movs	r3, #0
 80022fe:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	01db      	lsls	r3, r3, #7
 800230a:	4413      	add	r3, r2
 800230c:	3384      	adds	r3, #132	@ 0x84
 800230e:	461a      	mov	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002314:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d102      	bne.n	8002324 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800231e:	2304      	movs	r3, #4
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	e01b      	b.n	800235c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d102      	bne.n	8002332 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800232c:	2303      	movs	r3, #3
 800232e:	61fb      	str	r3, [r7, #28]
 8002330:	e014      	b.n	800235c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b04      	cmp	r3, #4
 8002338:	d00b      	beq.n	8002352 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800233e:	2b02      	cmp	r3, #2
 8002340:	d007      	beq.n	8002352 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002346:	2b03      	cmp	r3, #3
 8002348:	d003      	beq.n	8002352 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800234e:	2b07      	cmp	r3, #7
 8002350:	d102      	bne.n	8002358 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8002352:	2302      	movs	r3, #2
 8002354:	61fb      	str	r3, [r7, #28]
 8002356:	e001      	b.n	800235c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8002358:	2301      	movs	r3, #1
 800235a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	01db      	lsls	r3, r3, #7
 8002366:	4413      	add	r3, r2
 8002368:	3384      	adds	r3, #132	@ 0x84
 800236a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	4611      	mov	r1, r2
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	01d2      	lsls	r2, r2, #7
 8002376:	440a      	add	r2, r1
 8002378:	3284      	adds	r2, #132	@ 0x84
 800237a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800237e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	6859      	ldr	r1, [r3, #4]
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	1acb      	subs	r3, r1, r3
 8002396:	69f9      	ldr	r1, [r7, #28]
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800239e:	68f9      	ldr	r1, [r7, #12]
 80023a0:	6809      	ldr	r1, [r1, #0]
 80023a2:	4608      	mov	r0, r1
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	01c9      	lsls	r1, r1, #7
 80023a8:	4401      	add	r1, r0
 80023aa:	3184      	adds	r1, #132	@ 0x84
 80023ac:	4313      	orrs	r3, r2
 80023ae:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	01db      	lsls	r3, r3, #7
 80023ba:	4413      	add	r3, r2
 80023bc:	3384      	adds	r3, #132	@ 0x84
 80023be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	4611      	mov	r1, r2
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	01d2      	lsls	r2, r2, #7
 80023ca:	440a      	add	r2, r1
 80023cc:	3284      	adds	r2, #132	@ 0x84
 80023ce:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80023d2:	f023 0307 	bic.w	r3, r3, #7
 80023d6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	01db      	lsls	r3, r3, #7
 80023e2:	4413      	add	r3, r2
 80023e4:	3384      	adds	r3, #132	@ 0x84
 80023e6:	461a      	mov	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ec:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	01db      	lsls	r3, r3, #7
 80023f8:	4413      	add	r3, r2
 80023fa:	3384      	adds	r3, #132	@ 0x84
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	4611      	mov	r1, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	01d2      	lsls	r2, r2, #7
 8002408:	440a      	add	r2, r1
 800240a:	3284      	adds	r2, #132	@ 0x84
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6013      	str	r3, [r2, #0]
}
 8002412:	bf00      	nop
 8002414:	3724      	adds	r7, #36	@ 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e267      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d075      	beq.n	800252a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800243e:	4b88      	ldr	r3, [pc, #544]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b04      	cmp	r3, #4
 8002448:	d00c      	beq.n	8002464 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800244a:	4b85      	ldr	r3, [pc, #532]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002452:	2b08      	cmp	r3, #8
 8002454:	d112      	bne.n	800247c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002456:	4b82      	ldr	r3, [pc, #520]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800245e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002462:	d10b      	bne.n	800247c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	4b7e      	ldr	r3, [pc, #504]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d05b      	beq.n	8002528 <HAL_RCC_OscConfig+0x108>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d157      	bne.n	8002528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e242      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002484:	d106      	bne.n	8002494 <HAL_RCC_OscConfig+0x74>
 8002486:	4b76      	ldr	r3, [pc, #472]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a75      	ldr	r2, [pc, #468]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 800248c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e01d      	b.n	80024d0 <HAL_RCC_OscConfig+0xb0>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x98>
 800249e:	4b70      	ldr	r3, [pc, #448]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a6f      	ldr	r2, [pc, #444]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80024a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a6c      	ldr	r2, [pc, #432]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e00b      	b.n	80024d0 <HAL_RCC_OscConfig+0xb0>
 80024b8:	4b69      	ldr	r3, [pc, #420]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a68      	ldr	r2, [pc, #416]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80024be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	4b66      	ldr	r3, [pc, #408]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a65      	ldr	r2, [pc, #404]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80024ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d013      	beq.n	8002500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff f914 	bl	8001704 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e0:	f7ff f910 	bl	8001704 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	@ 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e207      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0xc0>
 80024fe:	e014      	b.n	800252a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7ff f900 	bl	8001704 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002508:	f7ff f8fc 	bl	8001704 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	@ 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e1f3      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	4b51      	ldr	r3, [pc, #324]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0xe8>
 8002526:	e000      	b.n	800252a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d063      	beq.n	80025fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002536:	4b4a      	ldr	r3, [pc, #296]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00b      	beq.n	800255a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002542:	4b47      	ldr	r3, [pc, #284]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800254a:	2b08      	cmp	r3, #8
 800254c:	d11c      	bne.n	8002588 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254e:	4b44      	ldr	r3, [pc, #272]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d116      	bne.n	8002588 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255a:	4b41      	ldr	r3, [pc, #260]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_RCC_OscConfig+0x152>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d001      	beq.n	8002572 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e1c7      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002572:	4b3b      	ldr	r3, [pc, #236]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4937      	ldr	r1, [pc, #220]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002586:	e03a      	b.n	80025fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d020      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002590:	4b34      	ldr	r3, [pc, #208]	@ (8002664 <HAL_RCC_OscConfig+0x244>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002596:	f7ff f8b5 	bl	8001704 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259e:	f7ff f8b1 	bl	8001704 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e1a8      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b28      	ldr	r3, [pc, #160]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4925      	ldr	r1, [pc, #148]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
 80025d0:	e015      	b.n	80025fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d2:	4b24      	ldr	r3, [pc, #144]	@ (8002664 <HAL_RCC_OscConfig+0x244>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7ff f894 	bl	8001704 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e0:	f7ff f890 	bl	8001704 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e187      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d036      	beq.n	8002678 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d016      	beq.n	8002640 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002612:	4b15      	ldr	r3, [pc, #84]	@ (8002668 <HAL_RCC_OscConfig+0x248>)
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7ff f874 	bl	8001704 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002620:	f7ff f870 	bl	8001704 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e167      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 8002634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x200>
 800263e:	e01b      	b.n	8002678 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002640:	4b09      	ldr	r3, [pc, #36]	@ (8002668 <HAL_RCC_OscConfig+0x248>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002646:	f7ff f85d 	bl	8001704 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	e00e      	b.n	800266c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264e:	f7ff f859 	bl	8001704 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d907      	bls.n	800266c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e150      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
 8002660:	40023800 	.word	0x40023800
 8002664:	42470000 	.word	0x42470000
 8002668:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	4b88      	ldr	r3, [pc, #544]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 800266e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ea      	bne.n	800264e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8097 	beq.w	80027b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268a:	4b81      	ldr	r3, [pc, #516]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10f      	bne.n	80026b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	4b7d      	ldr	r3, [pc, #500]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	4a7c      	ldr	r2, [pc, #496]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 80026a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b2:	2301      	movs	r3, #1
 80026b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b6:	4b77      	ldr	r3, [pc, #476]	@ (8002894 <HAL_RCC_OscConfig+0x474>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d118      	bne.n	80026f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c2:	4b74      	ldr	r3, [pc, #464]	@ (8002894 <HAL_RCC_OscConfig+0x474>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a73      	ldr	r2, [pc, #460]	@ (8002894 <HAL_RCC_OscConfig+0x474>)
 80026c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ce:	f7ff f819 	bl	8001704 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d6:	f7ff f815 	bl	8001704 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e10c      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002894 <HAL_RCC_OscConfig+0x474>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d106      	bne.n	800270a <HAL_RCC_OscConfig+0x2ea>
 80026fc:	4b64      	ldr	r3, [pc, #400]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002700:	4a63      	ldr	r2, [pc, #396]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6713      	str	r3, [r2, #112]	@ 0x70
 8002708:	e01c      	b.n	8002744 <HAL_RCC_OscConfig+0x324>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b05      	cmp	r3, #5
 8002710:	d10c      	bne.n	800272c <HAL_RCC_OscConfig+0x30c>
 8002712:	4b5f      	ldr	r3, [pc, #380]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002716:	4a5e      	ldr	r2, [pc, #376]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	6713      	str	r3, [r2, #112]	@ 0x70
 800271e:	4b5c      	ldr	r3, [pc, #368]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002722:	4a5b      	ldr	r2, [pc, #364]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6713      	str	r3, [r2, #112]	@ 0x70
 800272a:	e00b      	b.n	8002744 <HAL_RCC_OscConfig+0x324>
 800272c:	4b58      	ldr	r3, [pc, #352]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002730:	4a57      	ldr	r2, [pc, #348]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 8002732:	f023 0301 	bic.w	r3, r3, #1
 8002736:	6713      	str	r3, [r2, #112]	@ 0x70
 8002738:	4b55      	ldr	r3, [pc, #340]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273c:	4a54      	ldr	r2, [pc, #336]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 800273e:	f023 0304 	bic.w	r3, r3, #4
 8002742:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d015      	beq.n	8002778 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274c:	f7fe ffda 	bl	8001704 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002752:	e00a      	b.n	800276a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002754:	f7fe ffd6 	bl	8001704 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e0cb      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276a:	4b49      	ldr	r3, [pc, #292]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0ee      	beq.n	8002754 <HAL_RCC_OscConfig+0x334>
 8002776:	e014      	b.n	80027a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002778:	f7fe ffc4 	bl	8001704 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277e:	e00a      	b.n	8002796 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002780:	f7fe ffc0 	bl	8001704 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e0b5      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002796:	4b3e      	ldr	r3, [pc, #248]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1ee      	bne.n	8002780 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027a2:	7dfb      	ldrb	r3, [r7, #23]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d105      	bne.n	80027b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a8:	4b39      	ldr	r3, [pc, #228]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 80027aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ac:	4a38      	ldr	r2, [pc, #224]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 80027ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80a1 	beq.w	8002900 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027be:	4b34      	ldr	r3, [pc, #208]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d05c      	beq.n	8002884 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d141      	bne.n	8002856 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d2:	4b31      	ldr	r3, [pc, #196]	@ (8002898 <HAL_RCC_OscConfig+0x478>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7fe ff94 	bl	8001704 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fe ff90 	bl	8001704 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e087      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	4b27      	ldr	r3, [pc, #156]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280c:	019b      	lsls	r3, r3, #6
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002814:	085b      	lsrs	r3, r3, #1
 8002816:	3b01      	subs	r3, #1
 8002818:	041b      	lsls	r3, r3, #16
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	491b      	ldr	r1, [pc, #108]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002828:	4b1b      	ldr	r3, [pc, #108]	@ (8002898 <HAL_RCC_OscConfig+0x478>)
 800282a:	2201      	movs	r2, #1
 800282c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282e:	f7fe ff69 	bl	8001704 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002836:	f7fe ff65 	bl	8001704 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e05c      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002848:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x416>
 8002854:	e054      	b.n	8002900 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002856:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <HAL_RCC_OscConfig+0x478>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7fe ff52 	bl	8001704 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002864:	f7fe ff4e 	bl	8001704 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e045      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002876:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x444>
 8002882:	e03d      	b.n	8002900 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d107      	bne.n	800289c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e038      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
 8002890:	40023800 	.word	0x40023800
 8002894:	40007000 	.word	0x40007000
 8002898:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800289c:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <HAL_RCC_OscConfig+0x4ec>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d028      	beq.n	80028fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d121      	bne.n	80028fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d11a      	bne.n	80028fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028cc:	4013      	ands	r3, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d111      	bne.n	80028fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e2:	085b      	lsrs	r3, r3, #1
 80028e4:	3b01      	subs	r3, #1
 80028e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d107      	bne.n	80028fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800

08002910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0cc      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002924:	4b68      	ldr	r3, [pc, #416]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 030f 	and.w	r3, r3, #15
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d90c      	bls.n	800294c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002932:	4b65      	ldr	r3, [pc, #404]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800293a:	4b63      	ldr	r3, [pc, #396]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0b8      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d020      	beq.n	800299a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002964:	4b59      	ldr	r3, [pc, #356]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4a58      	ldr	r2, [pc, #352]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800296e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800297c:	4b53      	ldr	r3, [pc, #332]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4a52      	ldr	r2, [pc, #328]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002988:	4b50      	ldr	r3, [pc, #320]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	494d      	ldr	r1, [pc, #308]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	4313      	orrs	r3, r2
 8002998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d044      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d107      	bne.n	80029be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ae:	4b47      	ldr	r3, [pc, #284]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d119      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e07f      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d003      	beq.n	80029ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ce:	4b3f      	ldr	r3, [pc, #252]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e06f      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029de:	4b3b      	ldr	r3, [pc, #236]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e067      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ee:	4b37      	ldr	r3, [pc, #220]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f023 0203 	bic.w	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4934      	ldr	r1, [pc, #208]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a00:	f7fe fe80 	bl	8001704 <HAL_GetTick>
 8002a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a08:	f7fe fe7c 	bl	8001704 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e04f      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 020c 	and.w	r2, r3, #12
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d1eb      	bne.n	8002a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a30:	4b25      	ldr	r3, [pc, #148]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d20c      	bcs.n	8002a58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b22      	ldr	r3, [pc, #136]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a46:	4b20      	ldr	r3, [pc, #128]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d001      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e032      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a64:	4b19      	ldr	r3, [pc, #100]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4916      	ldr	r1, [pc, #88]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d009      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a82:	4b12      	ldr	r3, [pc, #72]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	490e      	ldr	r1, [pc, #56]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a96:	f000 f821 	bl	8002adc <HAL_RCC_GetSysClockFreq>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	490a      	ldr	r1, [pc, #40]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa8:	5ccb      	ldrb	r3, [r1, r3]
 8002aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002aae:	4a09      	ldr	r2, [pc, #36]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ab2:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fde0 	bl	800167c <HAL_InitTick>

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023c00 	.word	0x40023c00
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	08004868 	.word	0x08004868
 8002ad4:	20000010 	.word	0x20000010
 8002ad8:	20000014 	.word	0x20000014

08002adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae0:	b094      	sub	sp, #80	@ 0x50
 8002ae2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002af4:	4b79      	ldr	r3, [pc, #484]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 030c 	and.w	r3, r3, #12
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d00d      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0x40>
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	f200 80e1 	bhi.w	8002cc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x34>
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d003      	beq.n	8002b16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b0e:	e0db      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b10:	4b73      	ldr	r3, [pc, #460]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b14:	e0db      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b16:	4b73      	ldr	r3, [pc, #460]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b1a:	e0d8      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b1c:	4b6f      	ldr	r3, [pc, #444]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b24:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b26:	4b6d      	ldr	r3, [pc, #436]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d063      	beq.n	8002bfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b32:	4b6a      	ldr	r3, [pc, #424]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	099b      	lsrs	r3, r3, #6
 8002b38:	2200      	movs	r2, #0
 8002b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b44:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b46:	2300      	movs	r3, #0
 8002b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b4e:	4622      	mov	r2, r4
 8002b50:	462b      	mov	r3, r5
 8002b52:	f04f 0000 	mov.w	r0, #0
 8002b56:	f04f 0100 	mov.w	r1, #0
 8002b5a:	0159      	lsls	r1, r3, #5
 8002b5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b60:	0150      	lsls	r0, r2, #5
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4621      	mov	r1, r4
 8002b68:	1a51      	subs	r1, r2, r1
 8002b6a:	6139      	str	r1, [r7, #16]
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b80:	4659      	mov	r1, fp
 8002b82:	018b      	lsls	r3, r1, #6
 8002b84:	4651      	mov	r1, sl
 8002b86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b8a:	4651      	mov	r1, sl
 8002b8c:	018a      	lsls	r2, r1, #6
 8002b8e:	4651      	mov	r1, sl
 8002b90:	ebb2 0801 	subs.w	r8, r2, r1
 8002b94:	4659      	mov	r1, fp
 8002b96:	eb63 0901 	sbc.w	r9, r3, r1
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bae:	4690      	mov	r8, r2
 8002bb0:	4699      	mov	r9, r3
 8002bb2:	4623      	mov	r3, r4
 8002bb4:	eb18 0303 	adds.w	r3, r8, r3
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	462b      	mov	r3, r5
 8002bbc:	eb49 0303 	adc.w	r3, r9, r3
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bce:	4629      	mov	r1, r5
 8002bd0:	024b      	lsls	r3, r1, #9
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bd8:	4621      	mov	r1, r4
 8002bda:	024a      	lsls	r2, r1, #9
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002be2:	2200      	movs	r2, #0
 8002be4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002be6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002be8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bec:	f7fd fafe 	bl	80001ec <__aeabi_uldivmod>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bf8:	e058      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfa:	4b38      	ldr	r3, [pc, #224]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	099b      	lsrs	r3, r3, #6
 8002c00:	2200      	movs	r2, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	4611      	mov	r1, r2
 8002c06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c0a:	623b      	str	r3, [r7, #32]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c14:	4642      	mov	r2, r8
 8002c16:	464b      	mov	r3, r9
 8002c18:	f04f 0000 	mov.w	r0, #0
 8002c1c:	f04f 0100 	mov.w	r1, #0
 8002c20:	0159      	lsls	r1, r3, #5
 8002c22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c26:	0150      	lsls	r0, r2, #5
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4641      	mov	r1, r8
 8002c2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c32:	4649      	mov	r1, r9
 8002c34:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c4c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c50:	eb63 050b 	sbc.w	r5, r3, fp
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	00eb      	lsls	r3, r5, #3
 8002c5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c62:	00e2      	lsls	r2, r4, #3
 8002c64:	4614      	mov	r4, r2
 8002c66:	461d      	mov	r5, r3
 8002c68:	4643      	mov	r3, r8
 8002c6a:	18e3      	adds	r3, r4, r3
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	464b      	mov	r3, r9
 8002c70:	eb45 0303 	adc.w	r3, r5, r3
 8002c74:	607b      	str	r3, [r7, #4]
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c82:	4629      	mov	r1, r5
 8002c84:	028b      	lsls	r3, r1, #10
 8002c86:	4621      	mov	r1, r4
 8002c88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	028a      	lsls	r2, r1, #10
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c96:	2200      	movs	r2, #0
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	61fa      	str	r2, [r7, #28]
 8002c9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ca0:	f7fd faa4 	bl	80001ec <__aeabi_uldivmod>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4613      	mov	r3, r2
 8002caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cac:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	0c1b      	lsrs	r3, r3, #16
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002cbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cc6:	e002      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cc8:	4b05      	ldr	r3, [pc, #20]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3750      	adds	r7, #80	@ 0x50
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	00f42400 	.word	0x00f42400
 8002ce4:	007a1200 	.word	0x007a1200

08002ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10b      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d105      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d075      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d1c:	4b91      	ldr	r3, [pc, #580]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d22:	f7fe fcef 	bl	8001704 <HAL_GetTick>
 8002d26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d2a:	f7fe fceb 	bl	8001704 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e189      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d3c:	4b8a      	ldr	r3, [pc, #552]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f0      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d009      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	019a      	lsls	r2, r3, #6
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	071b      	lsls	r3, r3, #28
 8002d60:	4981      	ldr	r1, [pc, #516]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01f      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d74:	4b7c      	ldr	r3, [pc, #496]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d7a:	0f1b      	lsrs	r3, r3, #28
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	019a      	lsls	r2, r3, #6
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	071b      	lsls	r3, r3, #28
 8002d94:	4974      	ldr	r1, [pc, #464]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d9c:	4b72      	ldr	r3, [pc, #456]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002da2:	f023 021f 	bic.w	r2, r3, #31
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	496e      	ldr	r1, [pc, #440]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00d      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	019a      	lsls	r2, r3, #6
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	061b      	lsls	r3, r3, #24
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	071b      	lsls	r3, r3, #28
 8002dd4:	4964      	ldr	r1, [pc, #400]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ddc:	4b61      	ldr	r3, [pc, #388]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002de2:	f7fe fc8f 	bl	8001704 <HAL_GetTick>
 8002de6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dea:	f7fe fc8b 	bl	8001704 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e129      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dfc:	4b5a      	ldr	r3, [pc, #360]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d105      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d079      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e20:	4b52      	ldr	r3, [pc, #328]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e26:	f7fe fc6d 	bl	8001704 <HAL_GetTick>
 8002e2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e2e:	f7fe fc69 	bl	8001704 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e107      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e40:	4b49      	ldr	r3, [pc, #292]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e4c:	d0ef      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d020      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e5a:	4b43      	ldr	r3, [pc, #268]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e60:	0f1b      	lsrs	r3, r3, #28
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	019a      	lsls	r2, r3, #6
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	061b      	lsls	r3, r3, #24
 8002e74:	431a      	orrs	r2, r3
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	071b      	lsls	r3, r3, #28
 8002e7a:	493b      	ldr	r1, [pc, #236]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e82:	4b39      	ldr	r3, [pc, #228]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e88:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	3b01      	subs	r3, #1
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	4934      	ldr	r1, [pc, #208]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d01e      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eae:	0e1b      	lsrs	r3, r3, #24
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	019a      	lsls	r2, r3, #6
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	061b      	lsls	r3, r3, #24
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	071b      	lsls	r3, r3, #28
 8002ec8:	4927      	ldr	r1, [pc, #156]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ed0:	4b25      	ldr	r3, [pc, #148]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ed6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	4922      	ldr	r1, [pc, #136]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ee6:	4b21      	ldr	r3, [pc, #132]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002eec:	f7fe fc0a 	bl	8001704 <HAL_GetTick>
 8002ef0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ef4:	f7fe fc06 	bl	8001704 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e0a4      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f06:	4b18      	ldr	r3, [pc, #96]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f12:	d1ef      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 808b 	beq.w	8003038 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	4b10      	ldr	r3, [pc, #64]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	4a0f      	ldr	r2, [pc, #60]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f32:	4b0d      	ldr	r3, [pc, #52]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a0b      	ldr	r2, [pc, #44]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f48:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f4a:	f7fe fbdb 	bl	8001704 <HAL_GetTick>
 8002f4e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002f50:	e010      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f52:	f7fe fbd7 	bl	8001704 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d909      	bls.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e075      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002f64:	42470068 	.word	0x42470068
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	42470070 	.word	0x42470070
 8002f70:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002f74:	4b38      	ldr	r3, [pc, #224]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0e8      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f80:	4b36      	ldr	r3, [pc, #216]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f88:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d02f      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d028      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fa6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fae:	4b2c      	ldr	r3, [pc, #176]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002fb4:	4a29      	ldr	r2, [pc, #164]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fba:	4b28      	ldr	r3, [pc, #160]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d114      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002fc6:	f7fe fb9d 	bl	8001704 <HAL_GetTick>
 8002fca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fcc:	e00a      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fce:	f7fe fb99 	bl	8001704 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e035      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0ee      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ff8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ffc:	d10d      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002ffe:	4b17      	ldr	r3, [pc, #92]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800300e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003012:	4912      	ldr	r1, [pc, #72]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003014:	4313      	orrs	r3, r2
 8003016:	608b      	str	r3, [r1, #8]
 8003018:	e005      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800301a:	4b10      	ldr	r3, [pc, #64]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	4a0f      	ldr	r2, [pc, #60]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003020:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003024:	6093      	str	r3, [r2, #8]
 8003026:	4b0d      	ldr	r3, [pc, #52]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003028:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003032:	490a      	ldr	r1, [pc, #40]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003034:	4313      	orrs	r3, r2
 8003036:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800304a:	4b06      	ldr	r3, [pc, #24]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800304c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40007000 	.word	0x40007000
 800305c:	40023800 	.word	0x40023800
 8003060:	42470e40 	.word	0x42470e40
 8003064:	424711e0 	.word	0x424711e0

08003068 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e07b      	b.n	8003172 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	2b00      	cmp	r3, #0
 8003080:	d108      	bne.n	8003094 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800308a:	d009      	beq.n	80030a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	61da      	str	r2, [r3, #28]
 8003092:	e005      	b.n	80030a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fe f9e4 	bl	8001488 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003124:	ea42 0103 	orr.w	r1, r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	0c1b      	lsrs	r3, r3, #16
 800313e:	f003 0104 	and.w	r1, r3, #4
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003146:	f003 0210 	and.w	r2, r3, #16
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003160:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e01a      	b.n	80031c2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031a2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7fe f9b7 	bl	8001518 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b088      	sub	sp, #32
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	603b      	str	r3, [r7, #0]
 80031d6:	4613      	mov	r3, r2
 80031d8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031da:	f7fe fa93 	bl	8001704 <HAL_GetTick>
 80031de:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d001      	beq.n	80031f4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
 80031f2:	e12a      	b.n	800344a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_SPI_Transmit+0x36>
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e122      	b.n	800344a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_SPI_Transmit+0x48>
 800320e:	2302      	movs	r3, #2
 8003210:	e11b      	b.n	800344a <HAL_SPI_Transmit+0x280>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2203      	movs	r2, #3
 800321e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	88fa      	ldrh	r2, [r7, #6]
 8003232:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	88fa      	ldrh	r2, [r7, #6]
 8003238:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003260:	d10f      	bne.n	8003282 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003270:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003280:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328c:	2b40      	cmp	r3, #64	@ 0x40
 800328e:	d007      	beq.n	80032a0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800329e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032a8:	d152      	bne.n	8003350 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <HAL_SPI_Transmit+0xee>
 80032b2:	8b7b      	ldrh	r3, [r7, #26]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d145      	bne.n	8003344 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032bc:	881a      	ldrh	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	1c9a      	adds	r2, r3, #2
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032dc:	e032      	b.n	8003344 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d112      	bne.n	8003312 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	881a      	ldrh	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fc:	1c9a      	adds	r2, r3, #2
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003310:	e018      	b.n	8003344 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003312:	f7fe f9f7 	bl	8001704 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d803      	bhi.n	800332a <HAL_SPI_Transmit+0x160>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d102      	bne.n	8003330 <HAL_SPI_Transmit+0x166>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e082      	b.n	800344a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1c7      	bne.n	80032de <HAL_SPI_Transmit+0x114>
 800334e:	e053      	b.n	80033f8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <HAL_SPI_Transmit+0x194>
 8003358:	8b7b      	ldrh	r3, [r7, #26]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d147      	bne.n	80033ee <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	330c      	adds	r3, #12
 8003368:	7812      	ldrb	r2, [r2, #0]
 800336a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003384:	e033      	b.n	80033ee <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b02      	cmp	r3, #2
 8003392:	d113      	bne.n	80033bc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	7812      	ldrb	r2, [r2, #0]
 80033a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80033ba:	e018      	b.n	80033ee <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033bc:	f7fe f9a2 	bl	8001704 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d803      	bhi.n	80033d4 <HAL_SPI_Transmit+0x20a>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d2:	d102      	bne.n	80033da <HAL_SPI_Transmit+0x210>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e02d      	b.n	800344a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1c6      	bne.n	8003386 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	6839      	ldr	r1, [r7, #0]
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 f8bf 	bl	8003580 <SPI_EndRxTxTransaction>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10a      	bne.n	800342c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003448:	2300      	movs	r3, #0
  }
}
 800344a:	4618      	mov	r0, r3
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003460:	b2db      	uxtb	r3, r3
}
 8003462:	4618      	mov	r0, r3
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	4613      	mov	r3, r2
 800347e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003480:	f7fe f940 	bl	8001704 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	4413      	add	r3, r2
 800348e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003490:	f7fe f938 	bl	8001704 <HAL_GetTick>
 8003494:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003496:	4b39      	ldr	r3, [pc, #228]	@ (800357c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	015b      	lsls	r3, r3, #5
 800349c:	0d1b      	lsrs	r3, r3, #20
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	fb02 f303 	mul.w	r3, r2, r3
 80034a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034a6:	e054      	b.n	8003552 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ae:	d050      	beq.n	8003552 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034b0:	f7fe f928 	bl	8001704 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d902      	bls.n	80034c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d13d      	bne.n	8003542 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80034d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034de:	d111      	bne.n	8003504 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034e8:	d004      	beq.n	80034f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034f2:	d107      	bne.n	8003504 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003502:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003508:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800350c:	d10f      	bne.n	800352e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800352c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e017      	b.n	8003572 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	3b01      	subs	r3, #1
 8003550:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4013      	ands	r3, r2
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	429a      	cmp	r2, r3
 8003560:	bf0c      	ite	eq
 8003562:	2301      	moveq	r3, #1
 8003564:	2300      	movne	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	429a      	cmp	r2, r3
 800356e:	d19b      	bne.n	80034a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000010 	.word	0x20000010

08003580 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2201      	movs	r2, #1
 8003594:	2102      	movs	r1, #2
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f7ff ff6a 	bl	8003470 <SPI_WaitFlagStateUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a6:	f043 0220 	orr.w	r2, r3, #32
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e032      	b.n	8003618 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003620 <SPI_EndRxTxTransaction+0xa0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003624 <SPI_EndRxTxTransaction+0xa4>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	0d5b      	lsrs	r3, r3, #21
 80035be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035d0:	d112      	bne.n	80035f8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2200      	movs	r2, #0
 80035da:	2180      	movs	r1, #128	@ 0x80
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f7ff ff47 	bl	8003470 <SPI_WaitFlagStateUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d016      	beq.n	8003616 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ec:	f043 0220 	orr.w	r2, r3, #32
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e00f      	b.n	8003618 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	3b01      	subs	r3, #1
 8003602:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800360e:	2b80      	cmp	r3, #128	@ 0x80
 8003610:	d0f2      	beq.n	80035f8 <SPI_EndRxTxTransaction+0x78>
 8003612:	e000      	b.n	8003616 <SPI_EndRxTxTransaction+0x96>
        break;
 8003614:	bf00      	nop
  }

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20000010 	.word	0x20000010
 8003624:	165e9f81 	.word	0x165e9f81

08003628 <memset>:
 8003628:	4402      	add	r2, r0
 800362a:	4603      	mov	r3, r0
 800362c:	4293      	cmp	r3, r2
 800362e:	d100      	bne.n	8003632 <memset+0xa>
 8003630:	4770      	bx	lr
 8003632:	f803 1b01 	strb.w	r1, [r3], #1
 8003636:	e7f9      	b.n	800362c <memset+0x4>

08003638 <__libc_init_array>:
 8003638:	b570      	push	{r4, r5, r6, lr}
 800363a:	4d0d      	ldr	r5, [pc, #52]	@ (8003670 <__libc_init_array+0x38>)
 800363c:	4c0d      	ldr	r4, [pc, #52]	@ (8003674 <__libc_init_array+0x3c>)
 800363e:	1b64      	subs	r4, r4, r5
 8003640:	10a4      	asrs	r4, r4, #2
 8003642:	2600      	movs	r6, #0
 8003644:	42a6      	cmp	r6, r4
 8003646:	d109      	bne.n	800365c <__libc_init_array+0x24>
 8003648:	4d0b      	ldr	r5, [pc, #44]	@ (8003678 <__libc_init_array+0x40>)
 800364a:	4c0c      	ldr	r4, [pc, #48]	@ (800367c <__libc_init_array+0x44>)
 800364c:	f000 f818 	bl	8003680 <_init>
 8003650:	1b64      	subs	r4, r4, r5
 8003652:	10a4      	asrs	r4, r4, #2
 8003654:	2600      	movs	r6, #0
 8003656:	42a6      	cmp	r6, r4
 8003658:	d105      	bne.n	8003666 <__libc_init_array+0x2e>
 800365a:	bd70      	pop	{r4, r5, r6, pc}
 800365c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003660:	4798      	blx	r3
 8003662:	3601      	adds	r6, #1
 8003664:	e7ee      	b.n	8003644 <__libc_init_array+0xc>
 8003666:	f855 3b04 	ldr.w	r3, [r5], #4
 800366a:	4798      	blx	r3
 800366c:	3601      	adds	r6, #1
 800366e:	e7f2      	b.n	8003656 <__libc_init_array+0x1e>
 8003670:	08004880 	.word	0x08004880
 8003674:	08004880 	.word	0x08004880
 8003678:	08004880 	.word	0x08004880
 800367c:	08004884 	.word	0x08004884

08003680 <_init>:
 8003680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003682:	bf00      	nop
 8003684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003686:	bc08      	pop	{r3}
 8003688:	469e      	mov	lr, r3
 800368a:	4770      	bx	lr

0800368c <_fini>:
 800368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368e:	bf00      	nop
 8003690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003692:	bc08      	pop	{r3}
 8003694:	469e      	mov	lr, r3
 8003696:	4770      	bx	lr
